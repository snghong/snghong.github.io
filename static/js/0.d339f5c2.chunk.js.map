{"version":3,"sources":["../node_modules/mdurl/encode.js","../node_modules/unified/node_modules/is-buffer/index.js","../node_modules/extend/index.js","../node_modules/vfile/node_modules/is-buffer/index.js","../node_modules/react-markdown/node_modules/react-is/index.js","../node_modules/react-markdown/node_modules/react-is/cjs/react-is.production.min.js","../node_modules/style-to-object/index.js","../node_modules/inline-style-parser/index.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/bail/index.js","../node_modules/is-plain-obj/index.js","../node_modules/trough/lib/index.js","../node_modules/unified/lib/index.js","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../node_modules/micromark-util-character/index.js","../node_modules/micromark-factory-space/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/character-entities/index.js","../node_modules/decode-named-character-reference/index.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/parse.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/remark-parse/lib/index.js","../node_modules/unist-builder/lib/index.js","../node_modules/unist-util-is/lib/index.js","../node_modules/unist-util-visit-parents/lib/index.js","../node_modules/unist-util-visit-parents/lib/color.browser.js","../node_modules/unist-util-visit/lib/index.js","../node_modules/unist-util-position/lib/index.js","../node_modules/mdast-util-definitions/lib/index.js","../node_modules/mdast-util-to-hast/lib/traverse.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/wrap.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/unist-util-generated/lib/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/remark-rehype/index.js","../node_modules/property-information/lib/util/schema.js","../node_modules/property-information/lib/util/merge.js","../node_modules/property-information/lib/normalize.js","../node_modules/property-information/lib/util/info.js","../node_modules/property-information/lib/util/types.js","../node_modules/property-information/lib/util/defined-info.js","../node_modules/property-information/lib/util/create.js","../node_modules/property-information/lib/xlink.js","../node_modules/property-information/lib/xml.js","../node_modules/property-information/lib/util/case-sensitive-transform.js","../node_modules/property-information/lib/util/case-insensitive-transform.js","../node_modules/property-information/lib/xmlns.js","../node_modules/property-information/lib/aria.js","../node_modules/property-information/lib/html.js","../node_modules/property-information/lib/svg.js","../node_modules/property-information/index.js","../node_modules/react-markdown/lib/rehype-filter.js","../node_modules/react-markdown/lib/uri-transformer.js","../node_modules/hast-util-whitespace/index.js","../node_modules/property-information/lib/find.js","../node_modules/property-information/lib/hast-to-react.js","../node_modules/react-markdown/lib/ast-to-react.js","../node_modules/comma-separated-tokens/index.js","../node_modules/space-separated-tokens/index.js","../node_modules/react-markdown/lib/react-markdown.js"],"names":["encodeCache","encode","string","exclude","keepEscaped","i","l","code","nextCode","cache","result","defaultChars","ch","String","fromCharCode","test","push","toString","toUpperCase","slice","length","charCodeAt","getEncodeCache","encodeURIComponent","componentChars","module","exports","obj","constructor","isBuffer","hasOwn","Object","prototype","hasOwnProperty","toStr","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","key","hasOwnConstructor","hasIsPrototypeOf","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","extend","src","copy","copyIsArray","clone","arguments","deep","__webpack_require__","b","c","d","e","f","g","h","k","m","n","p","q","r","u","v","w","Symbol","for","x","y","a","t","$$typeof","type","z","A","B","C","D","E","F","G","H","I","ContextConsumer","ContextProvider","Element","ForwardRef","Fragment","Lazy","Memo","Portal","Profiler","StrictMode","Suspense","isAsyncMode","isConcurrentMode","isContextConsumer","isContextProvider","isElement","isForwardRef","isFragment","isLazy","isMemo","isPortal","isProfiler","isStrictMode","isSuspense","isValidElementType","typeOf","parse","style","iterator","declaration","output","property","declarations","hasIterator","len","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","NEWLINE","FORWARD_SLASH","ASTERISK","EMPTY_STRING","TYPE_COMMENT","TYPE_DECLARATION","trim","str","replace","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","node","Position","whitespace","this","end","source","content","errorsList","error","msg","err","Error","reason","filename","silent","re","exec","comments","rules","comment","pos","charAt","prop","val","ret","decl","decls","stringifyPosition","lib_position","lib_point","point","lib_index","lib_VFileMessage","[object Object]","place","origin","parts","super","undefined","index","indexOf","message","stack","fatal","ruleId","file","actual","expected","url","note","minpath_browser_path","basename","path","ext","assertPath","seenNonSlash","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","join","joined","_len","segments","_key","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","normalize","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","href","urlToPath","URL","protocol","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","order","lib_VFile","is_buffer_default","lib_buffer","data","messages","history","stored","map","includes","assertNonEmpty","lib_assertPath","assertPart","stem","encoding","part","bail","getPrototypeOf","toStringTag","trough","fns","pipeline","run","values","middlewareIndex","callback","pop","next","fn","_len2","_key2","middleware","called","_len3","parameters","_key3","fnExpectsCallback","done","apply","exception","then","_len4","_key4","wrap","use","middelware","unified","base","transformers","attachers","namespace","frozen","freezeIndex","processor","assertUnfrozen","own","Parser","Compiler","freeze","attacher","transformer","Number","POSITIVE_INFINITY","settings","addPlugin","addList","addPreset","assign","add","plugin","plugins","thing","entry","extend_default","doc","vfile","assertParser","newable","assertCompiler","assertNode","compile","Promise","executor","resolve","reject","tree","runSync","complete","assertDone","process","node_modules_is_buffer_default","looksLikeAVFileValue","processSync","destination","keys","asyncName","Boolean","looksLikeAVFile","emptyOptions","one","includeImageAlt","includeHtml","lib_node","alt","lib_all","children","splice","list","remove","items","chunkStart","from","unshift","micromark_util_combine_extensions_hasOwnProperty","syntaxExtension","all","extension","hook","left","right","micromark_util_combine_extensions_constructs","existing","before","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","factorySpace","effects","ok","max","limit","size","enter","prefix","consume","exit","content_content","tokenize","contentStart","attempt","parser","constructs","contentInitial","lineStart","previous","token","contentType","document_document","self","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","events","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","nok","document","disable","null","blankLine","after","partial","subtokenize","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","_isInFirstContentOfListItem","subcontent","_container","eventIndex","context","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","lib_content_content","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","text_string","initializeFactory","text_text","field","text","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","_index","_bufferIndex","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","info","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","chunkIndex","go","main","expectedCode","state","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","shift","sliceChunks","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","create","resolveTo","thematic_break_thematicBreak","marker","sequence","list_list","initialSize","kind","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","block_quote_blockQuote","open","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","normalizeIdentifier","toLowerCase","definition_definition","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","definition_titleBefore","afterWhitespace","defined","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","code_indented_furtherStart","furtherStart","setextUnderline","paragraph","definition","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","sequenceOpen","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","characterEntities","AElig","AMP","Aacute","Abreve","Acirc","Acy","Afr","Agrave","Alpha","Amacr","And","Aogon","Aopf","ApplyFunction","Aring","Ascr","Assign","Atilde","Auml","Backslash","Barv","Barwed","Bcy","Because","Bernoullis","Beta","Bfr","Bopf","Breve","Bscr","Bumpeq","CHcy","COPY","Cacute","Cap","CapitalDifferentialD","Cayleys","Ccaron","Ccedil","Ccirc","Cconint","Cdot","Cedilla","CenterDot","Cfr","Chi","CircleDot","CircleMinus","CirclePlus","CircleTimes","ClockwiseContourIntegral","CloseCurlyDoubleQuote","CloseCurlyQuote","Colon","Colone","Congruent","Conint","ContourIntegral","Copf","Coproduct","CounterClockwiseContourIntegral","Cross","Cscr","Cup","CupCap","DD","DDotrahd","DJcy","DScy","DZcy","Dagger","Darr","Dashv","Dcaron","Dcy","Del","Delta","Dfr","DiacriticalAcute","DiacriticalDot","DiacriticalDoubleAcute","DiacriticalGrave","DiacriticalTilde","Diamond","DifferentialD","Dopf","Dot","DotDot","DotEqual","DoubleContourIntegral","DoubleDot","DoubleDownArrow","DoubleLeftArrow","DoubleLeftRightArrow","DoubleLeftTee","DoubleLongLeftArrow","DoubleLongLeftRightArrow","DoubleLongRightArrow","DoubleRightArrow","DoubleRightTee","DoubleUpArrow","DoubleUpDownArrow","DoubleVerticalBar","DownArrow","DownArrowBar","DownArrowUpArrow","DownBreve","DownLeftRightVector","DownLeftTeeVector","DownLeftVector","DownLeftVectorBar","DownRightTeeVector","DownRightVector","DownRightVectorBar","DownTee","DownTeeArrow","Downarrow","Dscr","Dstrok","ENG","ETH","Eacute","Ecaron","Ecirc","Ecy","Edot","Efr","Egrave","Emacr","EmptySmallSquare","EmptyVerySmallSquare","Eogon","Eopf","Epsilon","Equal","EqualTilde","Equilibrium","Escr","Esim","Eta","Euml","Exists","ExponentialE","Fcy","Ffr","FilledSmallSquare","FilledVerySmallSquare","Fopf","ForAll","Fouriertrf","Fscr","GJcy","GT","Gamma","Gammad","Gbreve","Gcedil","Gcirc","Gcy","Gdot","Gfr","Gg","Gopf","GreaterEqual","GreaterEqualLess","GreaterFullEqual","GreaterGreater","GreaterLess","GreaterSlantEqual","GreaterTilde","Gscr","Gt","HARDcy","Hacek","Hat","Hcirc","Hfr","HilbertSpace","Hopf","HorizontalLine","Hscr","Hstrok","HumpDownHump","HumpEqual","IEcy","IJlig","IOcy","Iacute","Icirc","Icy","Idot","Ifr","Igrave","Im","Imacr","ImaginaryI","Implies","Int","Integral","Intersection","InvisibleComma","InvisibleTimes","Iogon","Iopf","Iota","Iscr","Itilde","Iukcy","Iuml","Jcirc","Jcy","Jfr","Jopf","Jscr","Jsercy","Jukcy","KHcy","KJcy","Kappa","Kcedil","Kcy","Kfr","Kopf","Kscr","LJcy","LT","Lacute","Lambda","Lang","Laplacetrf","Larr","Lcaron","Lcedil","Lcy","LeftAngleBracket","LeftArrow","LeftArrowBar","LeftArrowRightArrow","LeftCeiling","LeftDoubleBracket","LeftDownTeeVector","LeftDownVector","LeftDownVectorBar","LeftFloor","LeftRightArrow","LeftRightVector","LeftTee","LeftTeeArrow","LeftTeeVector","LeftTriangle","LeftTriangleBar","LeftTriangleEqual","LeftUpDownVector","LeftUpTeeVector","LeftUpVector","LeftUpVectorBar","LeftVector","LeftVectorBar","Leftarrow","Leftrightarrow","LessEqualGreater","LessFullEqual","LessGreater","LessLess","LessSlantEqual","LessTilde","Lfr","Ll","Lleftarrow","Lmidot","LongLeftArrow","LongLeftRightArrow","LongRightArrow","Longleftarrow","Longleftrightarrow","Longrightarrow","Lopf","LowerLeftArrow","LowerRightArrow","Lscr","Lsh","Lstrok","Lt","Map","Mcy","MediumSpace","Mellintrf","Mfr","MinusPlus","Mopf","Mscr","Mu","NJcy","Nacute","Ncaron","Ncedil","Ncy","NegativeMediumSpace","NegativeThickSpace","NegativeThinSpace","NegativeVeryThinSpace","NestedGreaterGreater","NestedLessLess","NewLine","Nfr","NoBreak","NonBreakingSpace","Nopf","Not","NotCongruent","NotCupCap","NotDoubleVerticalBar","NotElement","NotEqual","NotEqualTilde","NotExists","NotGreater","NotGreaterEqual","NotGreaterFullEqual","NotGreaterGreater","NotGreaterLess","NotGreaterSlantEqual","NotGreaterTilde","NotHumpDownHump","NotHumpEqual","NotLeftTriangle","NotLeftTriangleBar","NotLeftTriangleEqual","NotLess","NotLessEqual","NotLessGreater","NotLessLess","NotLessSlantEqual","NotLessTilde","NotNestedGreaterGreater","NotNestedLessLess","NotPrecedes","NotPrecedesEqual","NotPrecedesSlantEqual","NotReverseElement","NotRightTriangle","NotRightTriangleBar","NotRightTriangleEqual","NotSquareSubset","NotSquareSubsetEqual","NotSquareSuperset","NotSquareSupersetEqual","NotSubset","NotSubsetEqual","NotSucceeds","NotSucceedsEqual","NotSucceedsSlantEqual","NotSucceedsTilde","NotSuperset","NotSupersetEqual","NotTilde","NotTildeEqual","NotTildeFullEqual","NotTildeTilde","NotVerticalBar","Nscr","Ntilde","Nu","OElig","Oacute","Ocirc","Ocy","Odblac","Ofr","Ograve","Omacr","Omega","Omicron","Oopf","OpenCurlyDoubleQuote","OpenCurlyQuote","Or","Oscr","Oslash","Otilde","Otimes","Ouml","OverBar","OverBrace","OverBracket","OverParenthesis","PartialD","Pcy","Pfr","Phi","Pi","PlusMinus","Poincareplane","Popf","Pr","Precedes","PrecedesEqual","PrecedesSlantEqual","PrecedesTilde","Prime","Product","Proportion","Proportional","Pscr","Psi","QUOT","Qfr","Qopf","Qscr","RBarr","REG","Racute","Rang","Rarr","Rarrtl","Rcaron","Rcedil","Rcy","Re","ReverseElement","ReverseEquilibrium","ReverseUpEquilibrium","Rfr","Rho","RightAngleBracket","RightArrow","RightArrowBar","RightArrowLeftArrow","RightCeiling","RightDoubleBracket","RightDownTeeVector","RightDownVector","RightDownVectorBar","RightFloor","RightTee","RightTeeArrow","RightTeeVector","RightTriangle","RightTriangleBar","RightTriangleEqual","RightUpDownVector","RightUpTeeVector","RightUpVector","RightUpVectorBar","RightVector","RightVectorBar","Rightarrow","Ropf","RoundImplies","Rrightarrow","Rscr","Rsh","RuleDelayed","SHCHcy","SHcy","SOFTcy","Sacute","Sc","Scaron","Scedil","Scirc","Scy","Sfr","ShortDownArrow","ShortLeftArrow","ShortRightArrow","ShortUpArrow","Sigma","SmallCircle","Sopf","Sqrt","Square","SquareIntersection","SquareSubset","SquareSubsetEqual","SquareSuperset","SquareSupersetEqual","SquareUnion","Sscr","Star","Sub","Subset","SubsetEqual","Succeeds","SucceedsEqual","SucceedsSlantEqual","SucceedsTilde","SuchThat","Sum","Sup","Superset","SupersetEqual","Supset","THORN","TRADE","TSHcy","TScy","Tab","Tau","Tcaron","Tcedil","Tcy","Tfr","Therefore","Theta","ThickSpace","ThinSpace","Tilde","TildeEqual","TildeFullEqual","TildeTilde","Topf","TripleDot","Tscr","Tstrok","Uacute","Uarr","Uarrocir","Ubrcy","Ubreve","Ucirc","Ucy","Udblac","Ufr","Ugrave","Umacr","UnderBar","UnderBrace","UnderBracket","UnderParenthesis","Union","UnionPlus","Uogon","Uopf","UpArrow","UpArrowBar","UpArrowDownArrow","UpDownArrow","UpEquilibrium","UpTee","UpTeeArrow","Uparrow","Updownarrow","UpperLeftArrow","UpperRightArrow","Upsi","Upsilon","Uring","Uscr","Utilde","Uuml","VDash","Vbar","Vcy","Vdash","Vdashl","Vee","Verbar","Vert","VerticalBar","VerticalLine","VerticalSeparator","VerticalTilde","VeryThinSpace","Vfr","Vopf","Vscr","Vvdash","Wcirc","Wedge","Wfr","Wopf","Wscr","Xfr","Xi","Xopf","Xscr","YAcy","YIcy","YUcy","Yacute","Ycirc","Ycy","Yfr","Yopf","Yscr","Yuml","ZHcy","Zacute","Zcaron","Zcy","Zdot","ZeroWidthSpace","Zeta","Zfr","Zopf","Zscr","aacute","abreve","ac","acE","acd","acirc","acute","acy","aelig","af","afr","agrave","alefsym","aleph","alpha","amacr","amalg","amp","and","andand","andd","andslope","andv","ang","ange","angle","angmsd","angmsdaa","angmsdab","angmsdac","angmsdad","angmsdae","angmsdaf","angmsdag","angmsdah","angrt","angrtvb","angrtvbd","angsph","angst","angzarr","aogon","aopf","ap","apE","apacir","ape","apid","apos","approx","approxeq","aring","ascr","ast","asymp","asympeq","atilde","auml","awconint","awint","bNot","backcong","backepsilon","backprime","backsim","backsimeq","barvee","barwed","barwedge","bbrk","bbrktbrk","bcong","bcy","bdquo","becaus","because","bemptyv","bepsi","bernou","beta","beth","between","bfr","bigcap","bigcirc","bigcup","bigodot","bigoplus","bigotimes","bigsqcup","bigstar","bigtriangledown","bigtriangleup","biguplus","bigvee","bigwedge","bkarow","blacklozenge","blacksquare","blacktriangle","blacktriangledown","blacktriangleleft","blacktriangleright","blank","blk12","blk14","blk34","block","bne","bnequiv","bnot","bopf","bot","bottom","bowtie","boxDL","boxDR","boxDl","boxDr","boxH","boxHD","boxHU","boxHd","boxHu","boxUL","boxUR","boxUl","boxUr","boxV","boxVH","boxVL","boxVR","boxVh","boxVl","boxVr","boxbox","boxdL","boxdR","boxdl","boxdr","boxh","boxhD","boxhU","boxhd","boxhu","boxminus","boxplus","boxtimes","boxuL","boxuR","boxul","boxur","boxv","boxvH","boxvL","boxvR","boxvh","boxvl","boxvr","bprime","breve","brvbar","bscr","bsemi","bsim","bsime","bsol","bsolb","bsolhsub","bull","bullet","bump","bumpE","bumpe","bumpeq","cacute","cap","capand","capbrcup","capcap","capcup","capdot","caps","caret","caron","ccaps","ccaron","ccedil","ccirc","ccups","ccupssm","cdot","cedil","cemptyv","cent","centerdot","cfr","chcy","checkmark","chi","cir","cirE","circ","circeq","circlearrowleft","circlearrowright","circledR","circledS","circledast","circledcirc","circleddash","cire","cirfnint","cirmid","cirscir","clubs","clubsuit","colon","colone","coloneq","comma","commat","comp","compfn","complement","complexes","cong","congdot","conint","copf","coprod","copysr","crarr","cross","cscr","csub","csube","csup","csupe","ctdot","cudarrl","cudarrr","cuepr","cuesc","cularr","cularrp","cup","cupbrcap","cupcap","cupcup","cupdot","cupor","cups","curarr","curarrm","curlyeqprec","curlyeqsucc","curlyvee","curlywedge","curren","curvearrowleft","curvearrowright","cuvee","cuwed","cwconint","cwint","cylcty","dArr","dHar","dagger","daleth","darr","dash","dashv","dbkarow","dblac","dcaron","dcy","dd","ddagger","ddarr","ddotseq","deg","delta","demptyv","dfisht","dfr","dharl","dharr","diam","diamond","diamondsuit","diams","die","digamma","disin","div","divide","divideontimes","divonx","djcy","dlcorn","dlcrop","dollar","dopf","dot","doteq","doteqdot","dotminus","dotplus","dotsquare","doublebarwedge","downarrow","downdownarrows","downharpoonleft","downharpoonright","drbkarow","drcorn","drcrop","dscr","dscy","dsol","dstrok","dtdot","dtri","dtrif","duarr","duhar","dwangle","dzcy","dzigrarr","eDDot","eDot","eacute","easter","ecaron","ecir","ecirc","ecolon","ecy","edot","ee","efDot","efr","eg","egrave","egs","egsdot","el","elinters","ell","els","elsdot","emacr","empty","emptyset","emptyv","emsp13","emsp14","emsp","eng","ensp","eogon","eopf","epar","eparsl","eplus","epsi","epsilon","epsiv","eqcirc","eqcolon","eqsim","eqslantgtr","eqslantless","equals","equest","equiv","equivDD","eqvparsl","erDot","erarr","escr","esdot","esim","eta","eth","euml","euro","excl","exist","expectation","exponentiale","fallingdotseq","fcy","female","ffilig","fflig","ffllig","ffr","filig","fjlig","flat","fllig","fltns","fnof","fopf","forall","fork","forkv","fpartint","frac12","frac13","frac14","frac15","frac16","frac18","frac23","frac25","frac34","frac35","frac38","frac45","frac56","frac58","frac78","frasl","frown","fscr","gE","gEl","gacute","gamma","gammad","gap","gbreve","gcirc","gcy","gdot","ge","gel","geq","geqq","geqslant","ges","gescc","gesdot","gesdoto","gesdotol","gesl","gesles","gfr","gg","ggg","gimel","gjcy","gl","glE","gla","glj","gnE","gnap","gnapprox","gne","gneq","gneqq","gnsim","gopf","grave","gscr","gsim","gsime","gsiml","gt","gtcc","gtcir","gtdot","gtlPar","gtquest","gtrapprox","gtrarr","gtrdot","gtreqless","gtreqqless","gtrless","gtrsim","gvertneqq","gvnE","hArr","hairsp","half","hamilt","hardcy","harr","harrcir","harrw","hbar","hcirc","hearts","heartsuit","hellip","hercon","hfr","hksearow","hkswarow","hoarr","homtht","hookleftarrow","hookrightarrow","hopf","horbar","hscr","hslash","hstrok","hybull","hyphen","iacute","ic","icirc","icy","iecy","iexcl","iff","ifr","igrave","ii","iiiint","iiint","iinfin","iiota","ijlig","imacr","image","imagline","imagpart","imath","imof","imped","in","incare","infin","infintie","inodot","int","intcal","integers","intercal","intlarhk","intprod","iocy","iogon","iopf","iota","iprod","iquest","iscr","isin","isinE","isindot","isins","isinsv","isinv","it","itilde","iukcy","iuml","jcirc","jcy","jfr","jmath","jopf","jscr","jsercy","jukcy","kappa","kappav","kcedil","kcy","kfr","kgreen","khcy","kjcy","kopf","kscr","lAarr","lArr","lAtail","lBarr","lE","lEg","lHar","lacute","laemptyv","lagran","lambda","lang","langd","langle","lap","laquo","larr","larrb","larrbfs","larrfs","larrhk","larrlp","larrpl","larrsim","larrtl","lat","latail","late","lates","lbarr","lbbrk","lbrace","lbrack","lbrke","lbrksld","lbrkslu","lcaron","lcedil","lceil","lcub","lcy","ldca","ldquo","ldquor","ldrdhar","ldrushar","ldsh","le","leftarrow","leftarrowtail","leftharpoondown","leftharpoonup","leftleftarrows","leftrightarrow","leftrightarrows","leftrightharpoons","leftrightsquigarrow","leftthreetimes","leg","leq","leqq","leqslant","les","lescc","lesdot","lesdoto","lesdotor","lesg","lesges","lessapprox","lessdot","lesseqgtr","lesseqqgtr","lessgtr","lesssim","lfisht","lfloor","lfr","lg","lgE","lhard","lharu","lharul","lhblk","ljcy","ll","llarr","llcorner","llhard","lltri","lmidot","lmoust","lmoustache","lnE","lnap","lnapprox","lne","lneq","lneqq","lnsim","loang","loarr","lobrk","longleftarrow","longleftrightarrow","longmapsto","longrightarrow","looparrowleft","looparrowright","lopar","lopf","loplus","lotimes","lowast","lowbar","loz","lozenge","lozf","lpar","lparlt","lrarr","lrcorner","lrhar","lrhard","lrm","lrtri","lsaquo","lscr","lsh","lsim","lsime","lsimg","lsqb","lsquo","lsquor","lstrok","lt","ltcc","ltcir","ltdot","lthree","ltimes","ltlarr","ltquest","ltrPar","ltri","ltrie","ltrif","lurdshar","luruhar","lvertneqq","lvnE","mDDot","macr","male","malt","maltese","mapsto","mapstodown","mapstoleft","mapstoup","mcomma","mcy","mdash","measuredangle","mfr","mho","micro","mid","midast","midcir","middot","minus","minusb","minusd","minusdu","mlcp","mldr","mnplus","models","mopf","mp","mscr","mstpos","mu","multimap","mumap","nGg","nGt","nGtv","nLeftarrow","nLeftrightarrow","nLl","nLt","nLtv","nRightarrow","nVDash","nVdash","nabla","nacute","nang","nap","napE","napid","napos","napprox","natur","natural","naturals","nbsp","nbump","nbumpe","ncap","ncaron","ncedil","ncong","ncongdot","ncup","ncy","ndash","ne","neArr","nearhk","nearr","nearrow","nedot","nequiv","nesear","nesim","nexist","nexists","nfr","ngE","nge","ngeq","ngeqq","ngeqslant","nges","ngsim","ngt","ngtr","nhArr","nharr","nhpar","ni","nis","nisd","niv","njcy","nlArr","nlE","nlarr","nldr","nle","nleftarrow","nleftrightarrow","nleq","nleqq","nleqslant","nles","nless","nlsim","nlt","nltri","nltrie","nmid","nopf","not","notin","notinE","notindot","notinva","notinvb","notinvc","notni","notniva","notnivb","notnivc","npar","nparallel","nparsl","npart","npolint","npr","nprcue","npre","nprec","npreceq","nrArr","nrarr","nrarrc","nrarrw","nrightarrow","nrtri","nrtrie","nsc","nsccue","nsce","nscr","nshortmid","nshortparallel","nsim","nsime","nsimeq","nsmid","nspar","nsqsube","nsqsupe","nsub","nsubE","nsube","nsubset","nsubseteq","nsubseteqq","nsucc","nsucceq","nsup","nsupE","nsupe","nsupset","nsupseteq","nsupseteqq","ntgl","ntilde","ntlg","ntriangleleft","ntrianglelefteq","ntriangleright","ntrianglerighteq","nu","num","numero","numsp","nvDash","nvHarr","nvap","nvdash","nvge","nvgt","nvinfin","nvlArr","nvle","nvlt","nvltrie","nvrArr","nvrtrie","nvsim","nwArr","nwarhk","nwarr","nwarrow","nwnear","oS","oacute","oast","ocir","ocirc","ocy","odash","odblac","odiv","odot","odsold","oelig","ofcir","ofr","ogon","ograve","ogt","ohbar","ohm","oint","olarr","olcir","olcross","oline","olt","omacr","omega","omicron","omid","ominus","oopf","opar","operp","oplus","or","orarr","ord","orderof","ordf","ordm","origof","oror","orslope","orv","oscr","oslash","osol","otilde","otimes","otimesas","ouml","ovbar","par","para","parallel","parsim","parsl","pcy","percnt","period","permil","perp","pertenk","pfr","phi","phiv","phmmat","phone","pi","pitchfork","piv","planck","planckh","plankv","plus","plusacir","plusb","pluscir","plusdo","plusdu","pluse","plusmn","plussim","plustwo","pm","pointint","popf","pound","pr","prE","prap","prcue","pre","prec","precapprox","preccurlyeq","preceq","precnapprox","precneqq","precnsim","precsim","prime","primes","prnE","prnap","prnsim","prod","profalar","profline","profsurf","propto","prsim","prurel","pscr","psi","puncsp","qfr","qint","qopf","qprime","qscr","quaternions","quatint","quest","questeq","quot","rAarr","rArr","rAtail","rBarr","rHar","race","racute","radic","raemptyv","rang","rangd","range","rangle","raquo","rarr","rarrap","rarrb","rarrbfs","rarrc","rarrfs","rarrhk","rarrlp","rarrpl","rarrsim","rarrtl","rarrw","ratail","ratio","rationals","rbarr","rbbrk","rbrace","rbrack","rbrke","rbrksld","rbrkslu","rcaron","rcedil","rceil","rcub","rcy","rdca","rdldhar","rdquo","rdquor","rdsh","real","realine","realpart","reals","rect","reg","rfisht","rfloor","rfr","rhard","rharu","rharul","rho","rhov","rightarrow","rightarrowtail","rightharpoondown","rightharpoonup","rightleftarrows","rightleftharpoons","rightrightarrows","rightsquigarrow","rightthreetimes","ring","risingdotseq","rlarr","rlhar","rlm","rmoust","rmoustache","rnmid","roang","roarr","robrk","ropar","ropf","roplus","rotimes","rpar","rpargt","rppolint","rrarr","rsaquo","rscr","rsh","rsqb","rsquo","rsquor","rthree","rtimes","rtri","rtrie","rtrif","rtriltri","ruluhar","rx","sacute","sbquo","sc","scE","scap","scaron","sccue","sce","scedil","scirc","scnE","scnap","scnsim","scpolint","scsim","scy","sdot","sdotb","sdote","seArr","searhk","searr","searrow","sect","semi","seswar","setminus","setmn","sext","sfr","sfrown","sharp","shchcy","shcy","shortmid","shortparallel","shy","sigma","sigmaf","sigmav","sim","simdot","sime","simeq","simg","simgE","siml","simlE","simne","simplus","simrarr","slarr","smallsetminus","smashp","smeparsl","smid","smile","smt","smte","smtes","softcy","sol","solb","solbar","sopf","spades","spadesuit","spar","sqcap","sqcaps","sqcup","sqcups","sqsub","sqsube","sqsubset","sqsubseteq","sqsup","sqsupe","sqsupset","sqsupseteq","squ","square","squarf","squf","srarr","sscr","ssetmn","ssmile","sstarf","star","starf","straightepsilon","straightphi","strns","sub","subE","subdot","sube","subedot","submult","subnE","subne","subplus","subrarr","subset","subseteq","subseteqq","subsetneq","subsetneqq","subsim","subsub","subsup","succ","succapprox","succcurlyeq","succeq","succnapprox","succneqq","succnsim","succsim","sum","sung","sup1","sup2","sup3","sup","supE","supdot","supdsub","supe","supedot","suphsol","suphsub","suplarr","supmult","supnE","supne","supplus","supset","supseteq","supseteqq","supsetneq","supsetneqq","supsim","supsub","supsup","swArr","swarhk","swarr","swarrow","swnwar","szlig","tau","tbrk","tcaron","tcedil","tcy","tdot","telrec","tfr","there4","therefore","theta","thetasym","thetav","thickapprox","thicksim","thinsp","thkap","thksim","thorn","tilde","times","timesb","timesbar","timesd","tint","toea","top","topbot","topcir","topf","topfork","tosa","tprime","trade","triangle","triangledown","triangleleft","trianglelefteq","triangleq","triangleright","trianglerighteq","tridot","trie","triminus","triplus","trisb","tritime","trpezium","tscr","tscy","tshcy","tstrok","twixt","twoheadleftarrow","twoheadrightarrow","uArr","uHar","uacute","uarr","ubrcy","ubreve","ucirc","ucy","udarr","udblac","udhar","ufisht","ufr","ugrave","uharl","uharr","uhblk","ulcorn","ulcorner","ulcrop","ultri","umacr","uml","uogon","uopf","uparrow","updownarrow","upharpoonleft","upharpoonright","uplus","upsi","upsih","upsilon","upuparrows","urcorn","urcorner","urcrop","uring","urtri","uscr","utdot","utilde","utri","utrif","uuarr","uuml","uwangle","vArr","vBar","vBarv","vDash","vangrt","varepsilon","varkappa","varnothing","varphi","varpi","varpropto","varr","varrho","varsigma","varsubsetneq","varsubsetneqq","varsupsetneq","varsupsetneqq","vartheta","vartriangleleft","vartriangleright","vcy","vdash","vee","veebar","veeeq","vellip","verbar","vert","vfr","vltri","vnsub","vnsup","vopf","vprop","vrtri","vscr","vsubnE","vsubne","vsupnE","vsupne","vzigzag","wcirc","wedbar","wedge","wedgeq","weierp","wfr","wopf","wp","wr","wreath","wscr","xcap","xcirc","xcup","xdtri","xfr","xhArr","xharr","xi","xlArr","xlarr","xmap","xnis","xodot","xopf","xoplus","xotime","xrArr","xrarr","xscr","xsqcup","xuplus","xutri","xvee","xwedge","yacute","yacy","ycirc","ycy","yen","yfr","yicy","yopf","yscr","yucy","yuml","zacute","zcaron","zcy","zdot","zeetrf","zeta","zfr","zhcy","zigrarr","zopf","zscr","zwj","zwnj","decode_named_character_reference_own","decodeNamedCharacterReference","characterReference","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","media","group","label","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","classifyCharacter","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","nextEvents","movePoint","constructs_document","42","43","45","48","49","50","51","52","53","54","55","56","57","62","91","32","constructs_flow","35","sequenceFurther","60","61","95","96","126","constructs_string","38","92","constructs_text","33","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","93","tailExitIndex","headEnterIndex","constructs_attentionMarkers","parse_parse","extensions","combineExtensions","constructs_namespaceObject","search","decodeNumericCharacterReference","parseInt","characterEscapeOrReference","decode","$0","$1","$2","hex","lib_own","fromMarkdown","config","transforms","canContainEols","autolink","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","blockQuote","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeText","codeTextData","codeFlowValue","title","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreakEscape","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlText","htmlTextData","listItem","spread","_spread","checked","listItemValue","getData","ancestor","setData","listOrdered","listUnordered","reference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","thematicBreak","closer","atxHeadingSequence","depth","onexitdata","characterEscapeValue","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","mdast_util_from_markdown_lib_point","resume","codeFencedFence","onexithardbreak","referenceType","fragment","labelText","resource","setextHeadingLineSequence","setextHeadingText","configure","combined","mdastExtensions","tokenStack","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","errorHandler","parent","onExitError","lib_toString","ordered","compiler","postprocess","atCarriageReturn","endPosition","lastIndex","Math","ceil","preprocess","remarkParse","props","convert","lib_ok","castFactory","typeFactory","tests","checks","anyFactory","propsFactory","CONTINUE","EXIT","SKIP","visitParents","visitor","reverse","is","step","factory","parents","visit","subresult","grandparents","toResult","concat","lib_visit","pointStart","unist_util_position_lib_point","pointEnd","mdast_util_definitions_lib_own","clean","traverse_own","traverse_one","handlers","passThrough","returnNode","unknownHandler","augment","traverse_all","nodes","handlers_thematic_break_thematicBreak","wrap_wrap","loose","handlers_list_list","properties","className","footnoteReference","footnoteOrder","id","role","revert","subtype","suffix","contents","listItemLoose","blockquote","break","delete","footnote","footnoteById","no","dangerous","imageReference","encode_default","inlineCode","linkReference","listLoose","wrapped","disabled","child","root","table","rows","align","row","out","cell","toml","ignore","yaml","footnoteDefinition","mdast_util_to_hast_lib_own","lib_factory","allowDangerousHtml","lib_definitions","hName","hProperties","hChildren","ctx","toHast","foot","listItems","backReference","footer","remark_rehype","bridge","mutate","Schema","normal","space","merge","definitions","normalize_normalize","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","powers","types_boolean","increment","types_namespaceObject","defined_info_DefinedInfo","mask","mark","create_own","create_create","transform","attributes","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","lib_html_html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","default","defer","dir","dirName","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inert","inputMode","integrity","isMap","itemId","itemProp","itemRef","itemScope","itemType","language","loading","loop","low","manifest","maxLength","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootClonable","shadowRootDelegatesFocus","shadowRootMode","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","tabIndex","translate","typeMustMatch","useMap","width","writingSuggestions","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","codeBase","codeType","color","compact","declare","face","frame","frameBorder","hSpace","leftMargin","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in2","intercept","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","opacity","operator","orient","orientation","overflow","overlay","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","restart","rotate","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x1","x2","xChannelSelector","y1","y2","yChannelSelector","zoomAndPan","property_information_html","property_information_svg","rehypeFilter","allowedElements","disallowedElements","allowElement","parent_","unwrapDisallowed","protocols","valid","kebab","camelcase","hastToReact","ast_to_react_own","tableElements","Set","childrenToReact","childIndex","toReact","has","skipHtml","parentSchema","schema","addProperty","listDepth","component","components","basic","react_default","react_is_default","linkTarget","transformLinkUri","inline","level","transformImageUri","input","getInputElement","getElementsBeforeCount","textAlign","isHeader","sourcePos","rawSourcePos","sourcePosition","includeElementIndex","siblingCount","createElement","count","Type","rest","dashes","find","padRight","padLeft","comma_separated_tokens_stringify","style_to_object_default","styleReplacer","parseStyle","__webpack_exports__","ReactMarkdown","react_markdown_own","changelog","deprecated","renderers","astPlugins","escapeHtml","allowNode","allowedTypes","disallowedTypes","includeNodeIndex","deprecation","console","warn","remarkPlugins","rehypePlugins","hastNode","defaultProps","uri","first","propTypes","prop_types_default","func","arrayOf","bool","oneOfType"],"mappings":"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,eACAC,MAAA,SACAC,KAAA,OACAC,KAAA,SACAC,KAAA,SACAC,QAAA,SACAltD,IAAA,SACAmtD,OAAA,SACAC,WAAA,SACAC,WAAA,SACAC,SAAA,SACA76C,OAAA,SACA86C,OAAA,SACAC,IAAA,SACAC,MAAA,SACAC,cAAA,SACAC,IAAA,eACAC,IAAA,SACAC,MAAA,OACAC,IAAA,SACAC,OAAA,IACAC,OAAA,SACAC,OAAA,OACAC,MAAA,SACAC,OAAA,SACAC,OAAA,SACAC,QAAA,SACAC,KAAA,SACAC,KAAA,SACAC,OAAA,SACAC,OAAA,SACAC,KAAA,eACAC,GAAA,SACAC,KAAA,eACAC,OAAA,SACAC,GAAA,SACAC,SAAA,SACAC,MAAA,SACAC,IAAA,eACAC,IAAA,eACAC,KAAA,eACAC,WAAA,SACAC,gBAAA,SACAC,IAAA,eACAC,IAAA,eACAC,KAAA,eACAC,YAAA,SACAC,OAAA,SACAC,OAAA,SACAC,MAAA,SACAC,OAAA,SACAC,KAAA,eACAC,IAAA,SACAC,KAAA,eACAC,MAAA,eACAC,MAAA,SACAC,QAAA,SACAC,MAAA,SACAC,QAAA,SACAC,SAAA,SACAC,KAAA,OACAC,MAAA,eACAC,OAAA,eACAC,KAAA,SACAC,OAAA,SACAC,OAAA,SACAC,MAAA,SACAC,SAAA,eACAC,KAAA,SACAC,IAAA,SACAC,MAAA,SACAC,GAAA,SACAC,MAAA,SACAC,OAAA,SACAC,MAAA,SACAC,QAAA,SACAC,MAAA,eACAC,OAAA,SACAC,OAAA,SACAC,MAAA,eACAC,OAAA,SACAC,QAAA,SACAC,IAAA,eACAC,IAAA,eACAC,IAAA,SACAC,KAAA,SACAC,MAAA,eACAC,UAAA,eACAC,KAAA,eACAC,MAAA,SACAC,IAAA,SACAC,KAAA,SACAC,MAAA,SACAC,MAAA,SACAC,MAAA,SACAC,GAAA,SACAC,IAAA,SACAC,KAAA,SACAC,IAAA,SACAC,KAAA,SACAC,MAAA,SACAC,IAAA,eACAC,MAAA,SACAC,KAAA,SACAC,IAAA,SACAC,WAAA,SACAC,gBAAA,SACAC,KAAA,SACAC,MAAA,e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,KACAC,QAAahc,GACbic,UAAA,KACAtG,cAAA,KACAuG,cAAA,KACAC,YAAA,KACAC,KAAA,KACAj5F,MAAA,KACAk5F,KAAUrc,GACVsc,GAAA,KACAC,SAAA,KACA3G,UAAe5V,GACf/D,UAAeiE,GACfsc,KAAA,KACA3G,SAAA,KACA4G,cAAA,KACA3G,SAAA,KACA9C,MAAA,KACA+C,mBAAA,KACAC,0BAAA,KACAC,aAAA,KACAC,eAAA,KACAztG,QAAA,KACAi0G,kBAAA,KACAC,iBAAA,KACA3V,YAAA,KACA4V,OAAA,KACAC,GAAA,KACAC,GAAA,KACAz6G,EAAA,KACA8zG,SAAA,KACA4G,cAAA,KACAC,QAAahd,GACbid,gBAAqBjd,GACrBkd,UAAA,KACAC,QAAA,KACAC,IAAA,KACAC,QAAard,GACboW,iBAAA,KACA7O,SAAcjH,GACdgd,GAAA,KACAC,GAAA,KACAC,SAAA,KACAC,SAAA,KACAC,UAAe1d,GACfqW,iBAAA,KACA9tG,IAAA,KACAyS,MAAA,KACA2iG,SAAc3d,GACd4d,0BAAA,KACAC,KAAA,KACAvH,YAAiBtW,GACjBuW,SAAA,KACAuH,OAAA,KACAC,UAAA,KACAC,YAAA,KACAxH,WAAA,KACAC,aAAA,KACAwH,UAAA,KACAC,eAAA,KACAxH,WAAA,KACAC,SAAA,KACAC,eAAA,KACAC,YAAA,KACAC,UAAA,KACAC,YAAA,KACAC,WAAA,KACAmH,OAAA,KACAC,GAAA,KACArpG,KAAA,KACAspG,GAAA,KACAC,GAAA,KACAC,GAAQte,GACRue,GAAQve,GACRgX,UAAehX,GACfiX,2BAAA,KACAC,yBAAA,KACAsH,SAAA,KACAC,kBAAA,KACAC,cAAA,KACA3mB,QAAA,KACA4mB,QAAa5e,GACb6e,kBAAA,KACAC,WAAA,KACA3W,OAAA,KACA56F,KAAA,KACA+6F,SAAA,KACA8O,UAAepX,GACfqX,aAAkBrX,GAClBsX,aAAkBtX,GAClB5D,GAAA,KACA2iB,YAAiB/e,GACjBuX,eAAA,KACAyH,kBAAA,KACAhwD,GAAA,KACAiwD,IAAA,KACAC,UAAelf,GACf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","file":"static/js/0.d339f5c2.chunk.js","sourcesContent":["'use strict';\n\nvar encodeCache = {};\n\n// Create a lookup array where anything but characters in `chars` string\n// and alphanumeric chars is percent-encoded.\n//\nfunction getEncodeCache(exclude) {\n  var i,\n    ch,\n    cache = encodeCache[exclude];\n  if (cache) {\n    return cache;\n  }\n  cache = encodeCache[exclude] = [];\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n    if (/^[0-9a-z]$/i.test(ch)) {\n      // always allow unencoded alphanumeric characters\n      cache.push(ch);\n    } else {\n      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));\n    }\n  }\n  for (i = 0; i < exclude.length; i++) {\n    cache[exclude.charCodeAt(i)] = exclude[i];\n  }\n  return cache;\n}\n\n// Encode unsafe characters with percent-encoding, skipping already\n// encoded sequences.\n//\n//  - string       - string to encode\n//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\n//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\n//\nfunction encode(string, exclude, keepEscaped) {\n  var i,\n    l,\n    code,\n    nextCode,\n    cache,\n    result = '';\n  if (typeof exclude !== 'string') {\n    // encode(string, keepEscaped)\n    keepEscaped = exclude;\n    exclude = encode.defaultChars;\n  }\n  if (typeof keepEscaped === 'undefined') {\n    keepEscaped = true;\n  }\n  cache = getEncodeCache(exclude);\n  for (i = 0, l = string.length; i < l; i++) {\n    code = string.charCodeAt(i);\n    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {\n      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n        result += string.slice(i, i + 3);\n        i += 2;\n        continue;\n      }\n    }\n    if (code < 128) {\n      result += cache[code];\n      continue;\n    }\n    if (code >= 0xD800 && code <= 0xDFFF) {\n      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\n        nextCode = string.charCodeAt(i + 1);\n        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n          result += encodeURIComponent(string[i] + string[i + 1]);\n          i++;\n          continue;\n        }\n      }\n      result += '%EF%BF%BD';\n      continue;\n    }\n    result += encodeURIComponent(string[i]);\n  }\n  return result;\n}\nencode.defaultChars = \";/?:@&=+$,-_.!~*'()#\";\nencode.componentChars = \"-_.!~*'()\";\nmodule.exports = encode;","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer(obj) {\n  return obj != null && obj.constructor != null && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);\n};","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\nvar isArray = function isArray(arr) {\n  if (typeof Array.isArray === 'function') {\n    return Array.isArray(arr);\n  }\n  return toStr.call(arr) === '[object Array]';\n};\nvar isPlainObject = function isPlainObject(obj) {\n  if (!obj || toStr.call(obj) !== '[object Object]') {\n    return false;\n  }\n  var hasOwnConstructor = hasOwn.call(obj, 'constructor');\n  var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n  // Not own constructor property must be Object\n  if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n    return false;\n  }\n\n  // Own properties are enumerated firstly, so to speed up,\n  // if last one is own, then all properties are own.\n  var key;\n  for (key in obj) {/**/}\n  return typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n  if (defineProperty && options.name === '__proto__') {\n    defineProperty(target, options.name, {\n      enumerable: true,\n      configurable: true,\n      value: options.newValue,\n      writable: true\n    });\n  } else {\n    target[options.name] = options.newValue;\n  }\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n  if (name === '__proto__') {\n    if (!hasOwn.call(obj, name)) {\n      return void 0;\n    } else if (gOPD) {\n      // In early versions of node, obj['__proto__'] is buggy when obj has\n      // __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n      return gOPD(obj, name).value;\n    }\n  }\n  return obj[name];\n};\nmodule.exports = function extend() {\n  var options, name, src, copy, copyIsArray, clone;\n  var target = arguments[0];\n  var i = 1;\n  var length = arguments.length;\n  var deep = false;\n\n  // Handle a deep copy situation\n  if (typeof target === 'boolean') {\n    deep = target;\n    target = arguments[1] || {};\n    // skip the boolean and the target\n    i = 2;\n  }\n  if (target == null || typeof target !== 'object' && typeof target !== 'function') {\n    target = {};\n  }\n  for (; i < length; ++i) {\n    options = arguments[i];\n    // Only deal with non-null/undefined values\n    if (options != null) {\n      // Extend the base object\n      for (name in options) {\n        src = getProperty(target, name);\n        copy = getProperty(options, name);\n\n        // Prevent never-ending loop\n        if (target !== copy) {\n          // Recurse if we're merging plain objects or arrays\n          if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n            if (copyIsArray) {\n              copyIsArray = false;\n              clone = src && isArray(src) ? src : [];\n            } else {\n              clone = src && isPlainObject(src) ? src : {};\n            }\n\n            // Never move original objects, clone them\n            setProperty(target, {\n              name: name,\n              newValue: extend(deep, clone, copy)\n            });\n\n            // Don't bring in undefined values\n          } else if (typeof copy !== 'undefined') {\n            setProperty(target, {\n              name: name,\n              newValue: copy\n            });\n          }\n        }\n      }\n    }\n  }\n\n  // Return the modified object\n  return target;\n};","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer(obj) {\n  return obj != null && obj.constructor != null && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);\n};","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}","/** @license React v17.0.2\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar b = 60103,\n  c = 60106,\n  d = 60107,\n  e = 60108,\n  f = 60114,\n  g = 60109,\n  h = 60110,\n  k = 60112,\n  l = 60113,\n  m = 60120,\n  n = 60115,\n  p = 60116,\n  q = 60121,\n  r = 60122,\n  u = 60117,\n  v = 60129,\n  w = 60131;\nif (\"function\" === typeof Symbol && Symbol.for) {\n  var x = Symbol.for;\n  b = x(\"react.element\");\n  c = x(\"react.portal\");\n  d = x(\"react.fragment\");\n  e = x(\"react.strict_mode\");\n  f = x(\"react.profiler\");\n  g = x(\"react.provider\");\n  h = x(\"react.context\");\n  k = x(\"react.forward_ref\");\n  l = x(\"react.suspense\");\n  m = x(\"react.suspense_list\");\n  n = x(\"react.memo\");\n  p = x(\"react.lazy\");\n  q = x(\"react.block\");\n  r = x(\"react.server.block\");\n  u = x(\"react.fundamental\");\n  v = x(\"react.debug_trace_mode\");\n  w = x(\"react.legacy_hidden\");\n}\nfunction y(a) {\n  if (\"object\" === typeof a && null !== a) {\n    var t = a.$$typeof;\n    switch (t) {\n      case b:\n        switch (a = a.type, a) {\n          case d:\n          case f:\n          case e:\n          case l:\n          case m:\n            return a;\n          default:\n            switch (a = a && a.$$typeof, a) {\n              case h:\n              case k:\n              case p:\n              case n:\n              case g:\n                return a;\n              default:\n                return t;\n            }\n        }\n      case c:\n        return t;\n    }\n  }\n}\nvar z = g,\n  A = b,\n  B = k,\n  C = d,\n  D = p,\n  E = n,\n  F = c,\n  G = f,\n  H = e,\n  I = l;\nexports.ContextConsumer = h;\nexports.ContextProvider = z;\nexports.Element = A;\nexports.ForwardRef = B;\nexports.Fragment = C;\nexports.Lazy = D;\nexports.Memo = E;\nexports.Portal = F;\nexports.Profiler = G;\nexports.StrictMode = H;\nexports.Suspense = I;\nexports.isAsyncMode = function () {\n  return !1;\n};\nexports.isConcurrentMode = function () {\n  return !1;\n};\nexports.isContextConsumer = function (a) {\n  return y(a) === h;\n};\nexports.isContextProvider = function (a) {\n  return y(a) === g;\n};\nexports.isElement = function (a) {\n  return \"object\" === typeof a && null !== a && a.$$typeof === b;\n};\nexports.isForwardRef = function (a) {\n  return y(a) === k;\n};\nexports.isFragment = function (a) {\n  return y(a) === d;\n};\nexports.isLazy = function (a) {\n  return y(a) === p;\n};\nexports.isMemo = function (a) {\n  return y(a) === n;\n};\nexports.isPortal = function (a) {\n  return y(a) === c;\n};\nexports.isProfiler = function (a) {\n  return y(a) === f;\n};\nexports.isStrictMode = function (a) {\n  return y(a) === e;\n};\nexports.isSuspense = function (a) {\n  return y(a) === l;\n};\nexports.isValidElementType = function (a) {\n  return \"string\" === typeof a || \"function\" === typeof a || a === d || a === f || a === v || a === e || a === l || a === m || a === w || \"object\" === typeof a && null !== a && (a.$$typeof === p || a.$$typeof === n || a.$$typeof === g || a.$$typeof === h || a.$$typeof === k || a.$$typeof === u || a.$$typeof === q || a[0] === r) ? !0 : !1;\n};\nexports.typeOf = y;","var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n  return output;\n}\nmodule.exports = StyleToObject;","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n  if (!style) return [];\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = {\n      line: lineno,\n      column: column\n    };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = {\n      line: lineno,\n      column: column\n    };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(options.source + ':' + lineno + ':' + column + ': ' + msg);\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while (c = comment()) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n    var i = 2;\n    while (EMPTY_STRING != style.charAt(i) && (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))) {\n      ++i;\n    }\n    i += 2;\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING)) : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n    comments(decls);\n\n    // declarations\n    var decl;\n    while (decl = declaration()) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n    return decls;\n  }\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return '';\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position);\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value);\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value);\n  }\n\n  // ?\n  return '';\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column);\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end);\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1;\n}","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport { stringifyPosition } from 'unist-util-stringify-position';\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null];\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {\n        line: null,\n        column: null\n      },\n      // @ts-expect-error: \"\n      end: {\n        line: null,\n        column: null\n      }\n    };\n    super();\n    if (typeof place === 'string') {\n      origin = place;\n      place = undefined;\n    }\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':');\n      if (index === -1) {\n        parts[1] = origin;\n      } else {\n        parts[0] = origin.slice(0, index);\n        parts[1] = origin.slice(index + 1);\n      }\n    }\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position;\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place;\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place;\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1';\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason;\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = '';\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack;\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message;\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal;\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line;\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column;\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position;\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0];\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1];\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file;\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual;\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected;\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url;\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note;\n    /* eslint-enable no-unused-expressions */\n  }\n}\nVFileMessage.prototype.file = '';\nVFileMessage.prototype.name = '';\nVFileMessage.prototype.reason = '';\nVFileMessage.prototype.message = '';\nVFileMessage.prototype.stack = '';\nVFileMessage.prototype.fatal = null;\nVFileMessage.prototype.column = null;\nVFileMessage.prototype.line = null;\nVFileMessage.prototype.source = null;\nVFileMessage.prototype.ruleId = null;\nVFileMessage.prototype.position = null;","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {\n  basename,\n  dirname,\n  extname,\n  join,\n  sep: '/'\n};\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string');\n  }\n  assertPath(path);\n  let start = 0;\n  let end = -1;\n  let index = path.length;\n  /** @type {boolean | undefined} */\n  let seenNonSlash;\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1;\n          break;\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true;\n        end = index + 1;\n      }\n    }\n    return end < 0 ? '' : path.slice(start, end);\n  }\n  if (ext === path) {\n    return '';\n  }\n  let firstNonSlashEnd = -1;\n  let extIndex = ext.length - 1;\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1;\n        break;\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true;\n        firstNonSlashEnd = index + 1;\n      }\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index;\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1;\n          end = firstNonSlashEnd;\n        }\n      }\n    }\n  }\n  if (start === end) {\n    end = firstNonSlashEnd;\n  } else if (end < 0) {\n    end = path.length;\n  }\n  return path.slice(start, end);\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path);\n  if (path.length === 0) {\n    return '.';\n  }\n  let end = -1;\n  let index = path.length;\n  /** @type {boolean | undefined} */\n  let unmatchedSlash;\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index;\n        break;\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true;\n    }\n  }\n  return end < 0 ? path.charCodeAt(0) === 47 /* `/` */ ? '/' : '.' : end === 1 && path.charCodeAt(0) === 47 /* `/` */ ? '//' : path.slice(0, end);\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path);\n  let index = path.length;\n  let end = -1;\n  let startPart = 0;\n  let startDot = -1;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0;\n  /** @type {boolean | undefined} */\n  let unmatchedSlash;\n  while (index--) {\n    const code = path.charCodeAt(index);\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1;\n        break;\n      }\n      continue;\n    }\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true;\n      end = index + 1;\n    }\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index;\n      } else if (preDotState !== 1) {\n        preDotState = 1;\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1;\n    }\n  }\n  if (startDot < 0 || end < 0 ||\n  // We saw a non-dot character immediately before the dot.\n  preDotState === 0 ||\n  // The (right-most) trimmed path component is exactly `..`.\n  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join() {\n  let index = -1;\n  /** @type {string | undefined} */\n  let joined;\n  for (var _len = arguments.length, segments = new Array(_len), _key = 0; _key < _len; _key++) {\n    segments[_key] = arguments[_key];\n  }\n  while (++index < segments.length) {\n    assertPath(segments[index]);\n    if (segments[index]) {\n      joined = joined === undefined ? segments[index] : joined + '/' + segments[index];\n    }\n  }\n  return joined === undefined ? '.' : normalize(joined);\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path);\n  const absolute = path.charCodeAt(0) === 47; /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute);\n  if (value.length === 0 && !absolute) {\n    value = '.';\n  }\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/';\n  }\n  return absolute ? '/' + value : value;\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = '';\n  let lastSegmentLength = 0;\n  let lastSlash = -1;\n  let dots = 0;\n  let index = -1;\n  /** @type {number | undefined} */\n  let code;\n  /** @type {number} */\n  let lastSlashIndex;\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index);\n    } else if (code === 47 /* `/` */) {\n      break;\n    } else {\n      code = 47; /* `/` */\n    }\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (result.length < 2 || lastSegmentLength !== 2 || result.charCodeAt(result.length - 1) !== 46 /* `.` */ || result.charCodeAt(result.length - 2) !== 46 /* `.` */) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/');\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = '';\n                lastSegmentLength = 0;\n              } else {\n                result = result.slice(0, lastSlashIndex);\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/');\n              }\n              lastSlash = index;\n              dots = 0;\n              continue;\n            }\n          } else if (result.length > 0) {\n            result = '';\n            lastSegmentLength = 0;\n            lastSlash = index;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index);\n        } else {\n          result = path.slice(lastSlash + 1, index);\n        }\n        lastSegmentLength = index - lastSlash - 1;\n      }\n      lastSlash = index;\n      dots = 0;\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++;\n    } else {\n      dots = -1;\n    }\n  }\n  return result;\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n/* eslint-enable max-depth, complexity */","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {\n  cwd\n};\nfunction cwd() {\n  return '/';\n}","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return fileUrlOrPath !== null && typeof fileUrlOrPath === 'object' &&\n  // @ts-expect-error: indexable.\n  fileUrlOrPath.href &&\n  // @ts-expect-error: indexable.\n  fileUrlOrPath.origin;\n}","/// <reference lib=\"dom\" />\n\nimport { isUrl } from './minurl.shared.js';\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path);\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The \"path\" argument must be of type string or an instance of URL. Received `' + path + '`');\n    error.code = 'ERR_INVALID_ARG_TYPE';\n    throw error;\n  }\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file');\n    error.code = 'ERR_INVALID_URL_SCHEME';\n    throw error;\n  }\n  return getPathFromURLPosix(path);\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('File URL host must be \"localhost\" or empty on darwin');\n    error.code = 'ERR_INVALID_FILE_URL_HOST';\n    throw error;\n  }\n  const pathname = url.pathname;\n  let index = -1;\n  while (++index < pathname.length) {\n    if (pathname.charCodeAt(index) === 37 /* `%` */ && pathname.charCodeAt(index + 1) === 50 /* `2` */) {\n      const third = pathname.charCodeAt(index + 2);\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError('File URL path must not include encoded / characters');\n        error.code = 'ERR_INVALID_FILE_URL_PATH';\n        throw error;\n      }\n    }\n  }\n  return decodeURIComponent(pathname);\n}\nexport { isUrl } from './minurl.shared.js';","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer';\nimport { VFileMessage } from 'vfile-message';\nimport { path } from './minpath.js';\nimport { proc } from './minproc.js';\nimport { urlToPath, isUrl } from './minurl.js';\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname'];\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options;\n    if (!value) {\n      options = {};\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {\n        value\n      };\n    } else if (isUrl(value)) {\n      options = {\n        path: value\n      };\n    } else {\n      options = value;\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {};\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = [];\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = [];\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd();\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value;\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored;\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result;\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map;\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1;\n    while (++index < order.length) {\n      const prop = order[index];\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (prop in options && options[prop] !== undefined && options[prop] !== null) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop];\n      }\n    }\n\n    /** @type {string} */\n    let prop;\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop];\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1];\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path);\n    }\n    assertNonEmpty(path, 'path');\n    if (this.path !== path) {\n      this.history.push(path);\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined;\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname');\n    this.path = path.join(dirname || '', this.basename);\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined;\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename');\n    assertPart(basename, 'basename');\n    this.path = path.join(this.dirname || '', basename);\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined;\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname');\n    assertPath(this.dirname, 'extname');\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`');\n      }\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots');\n      }\n    }\n    this.path = path.join(this.dirname, this.stem + (extname || ''));\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string' ? path.basename(this.path, this.extname) : undefined;\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem');\n    assertPart(stem, 'stem');\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''));\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined);\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin);\n    if (this.path) {\n      message.name = this.path + ':' + message.name;\n      message.file = this.path;\n    }\n    message.fatal = false;\n    this.messages.push(message);\n    return message;\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin);\n    message.fatal = null;\n    return message;\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin);\n    message.fatal = true;\n    throw message;\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error('`' + name + '` cannot be a path: did not expect `' + path.sep + '`');\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty');\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too');\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value);\n}","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error;\n  }\n}","export default function isPlainObject(value) {\n  if (typeof value !== 'object' || value === null) {\n    return false;\n  }\n  const prototype = Object.getPrototypeOf(value);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = [];\n  /** @type {Pipeline} */\n  const pipeline = {\n    run,\n    use\n  };\n  return pipeline;\n\n  /** @type {Run} */\n  function run() {\n    for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n      values[_key] = arguments[_key];\n    }\n    let middlewareIndex = -1;\n    /** @type {Callback} */\n    const callback = values.pop();\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback);\n    }\n    next(null, ...values);\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error) {\n      const fn = fns[++middlewareIndex];\n      let index = -1;\n      if (error) {\n        callback(error);\n        return;\n      }\n\n      // Copy non-nullish input into values.\n      for (var _len2 = arguments.length, output = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        output[_key2 - 1] = arguments[_key2];\n      }\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index];\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output;\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output);\n      } else {\n        callback(null, ...output);\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError('Expected `middelware` to be a function, not ' + middelware);\n    }\n    fns.push(middelware);\n    return pipeline;\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called;\n  return wrapped;\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped() {\n    for (var _len3 = arguments.length, parameters = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      parameters[_key3] = arguments[_key3];\n    }\n    const fnExpectsCallback = middleware.length > parameters.length;\n    /** @type {any} */\n    let result;\n    if (fnExpectsCallback) {\n      parameters.push(done);\n    }\n    try {\n      result = middleware.apply(this, parameters);\n    } catch (error) {\n      const exception = /** @type {Error} */error;\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception;\n      }\n      return done(exception);\n    }\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done);\n      } else if (result instanceof Error) {\n        done(result);\n      } else {\n        then(result);\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error) {\n    if (!called) {\n      called = true;\n      for (var _len4 = arguments.length, output = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        output[_key4 - 1] = arguments[_key4];\n      }\n      callback(error, ...output);\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value);\n  }\n}","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport { bail } from 'bail';\nimport isBuffer from 'is-buffer';\nimport extend from 'extend';\nimport isPlainObj from 'is-plain-obj';\nimport { trough } from 'trough';\nimport { VFile } from 'vfile';\n\n// Expose a frozen processor.\nexport const unified = base().freeze();\nconst own = {}.hasOwnProperty;\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough();\n  /** @type {Processor['attachers']} */\n  const attachers = [];\n  /** @type {Record<string, unknown>} */\n  let namespace = {};\n  /** @type {boolean|undefined} */\n  let frozen;\n  let freezeIndex = -1;\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data;\n  processor.Parser = undefined;\n  processor.Compiler = undefined;\n\n  // Lock.\n  processor.freeze = freeze;\n\n  // Plugins.\n  processor.attachers = attachers;\n  // @ts-expect-error: overloads are handled.\n  processor.use = use;\n\n  // API.\n  processor.parse = parse;\n  processor.stringify = stringify;\n  // @ts-expect-error: overloads are handled.\n  processor.run = run;\n  processor.runSync = runSync;\n  // @ts-expect-error: overloads are handled.\n  processor.process = process;\n  processor.processSync = processSync;\n\n  // Expose.\n  return processor;\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base();\n    let index = -1;\n    while (++index < attachers.length) {\n      destination.use(...attachers[index]);\n    }\n    destination.data(extend(true, {}, namespace));\n    return destination;\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen);\n        namespace[key] = value;\n        return processor;\n      }\n\n      // Get `key`.\n      return own.call(namespace, key) && namespace[key] || null;\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen);\n      namespace = key;\n      return processor;\n    }\n\n    // Get space.\n    return namespace;\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor;\n    }\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex];\n      if (options[0] === false) {\n        continue;\n      }\n      if (options[0] === true) {\n        options[0] = undefined;\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options);\n      if (typeof transformer === 'function') {\n        transformers.use(transformer);\n      }\n    }\n    frozen = true;\n    freezeIndex = Number.POSITIVE_INFINITY;\n    return processor;\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value) {\n    for (var _len = arguments.length, options = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      options[_key - 1] = arguments[_key];\n    }\n    /** @type {Record<string, unknown>|undefined} */\n    let settings;\n    assertUnfrozen('use', frozen);\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options);\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value);\n      } else {\n        addPreset(value);\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`');\n    }\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings);\n    }\n    return processor;\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value);\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value;\n          addPlugin(plugin, ...options);\n        } else {\n          addPreset(value);\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`');\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins);\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings);\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1;\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index];\n          add(thing);\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`');\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1;\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry;\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index];\n          break;\n        }\n      }\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value);\n        }\n        entry[1] = value;\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments]);\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze();\n    const file = vfile(doc);\n    const Parser = processor.Parser;\n    assertParser('parse', Parser);\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse();\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file); // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze();\n    const file = vfile(doc);\n    const Compiler = processor.Compiler;\n    assertCompiler('stringify', Compiler);\n    assertNode(node);\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile();\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file); // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node);\n    processor.freeze();\n    if (!callback && typeof doc === 'function') {\n      callback = doc;\n      doc = undefined;\n    }\n    if (!callback) {\n      return new Promise(executor);\n    }\n    executor(null, callback);\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done);\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node;\n        if (error) {\n          reject(error);\n        } else if (resolve) {\n          resolve(tree);\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file);\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result;\n    /** @type {boolean|undefined} */\n    let complete;\n    processor.run(node, file, done);\n    assertDone('runSync', 'run', complete);\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result;\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error);\n      result = tree;\n      complete = true;\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze();\n    assertParser('process', processor.Parser);\n    assertCompiler('process', processor.Compiler);\n    if (!callback) {\n      return new Promise(executor);\n    }\n    executor(null, callback);\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc);\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error);\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file);\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result;\n          } else {\n            file.result = result;\n          }\n          done(error, file);\n        }\n      });\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error);\n        } else if (resolve) {\n          resolve(file);\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file);\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete;\n    processor.freeze();\n    assertParser('processSync', processor.Parser);\n    assertCompiler('processSync', processor.Compiler);\n    const file = vfile(doc);\n    processor.process(file, done);\n    assertDone('processSync', 'process', complete);\n    return file;\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true;\n      bail(error);\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return typeof value === 'function' &&\n  // Prototypes do exist.\n  // type-coverage:ignore-next-line\n  value.prototype && (\n  // A function with keys in its prototype is probably a constructor.\n  // Classes’ prototype methods are not enumerable, so we check if some value\n  // exists in the prototype.\n  // type-coverage:ignore-next-line\n  keys(value.prototype) || name in value.prototype);\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key;\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`');\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`');\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error('Cannot call `' + name + '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.');\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`');\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error('`' + name + '` finished async. Use `' + asyncName + '` instead');\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value);\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(value && typeof value === 'object' && 'message' in value && 'messages' in value);\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value);\n}","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {};\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions;\n  const includeImageAlt = typeof settings.includeImageAlt === 'boolean' ? settings.includeImageAlt : true;\n  const includeHtml = typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true;\n  return one(value, includeImageAlt, includeHtml);\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value;\n    }\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt;\n    }\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml);\n    }\n  }\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml);\n  }\n  return '';\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = [];\n  let index = -1;\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml);\n  }\n  return result.join('');\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object');\n}","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length;\n  let chunkStart = 0;\n  /** @type {Array<unknown>} */\n  let parameters;\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n  remove = remove > 0 ? remove : 0;\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove);\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters);\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove);\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000);\n      parameters.unshift(start, 0);\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters);\n      chunkStart += 10000;\n      start += 10000;\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items);\n    return list;\n  }\n  return items;\n}","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport { splice } from 'micromark-util-chunked';\nconst hasOwnProperty = {}.hasOwnProperty;\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {};\n  let index = -1;\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index]);\n  }\n  return all;\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook;\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined;\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {});\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook];\n    /** @type {string} */\n    let code;\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = [];\n        const value = right[code];\n        constructs(\n        // @ts-expect-error Looks like a list.\n        left[code], Array.isArray(value) ? value : value ? [value] : []);\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1;\n  /** @type {Array<unknown>} */\n  const before = [];\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;\n    (list[index].add === 'after' ? existing : before).push(list[index]);\n  }\n  splice(existing, 0, 0, before);\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {};\n  let index = -1;\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index]);\n  }\n  return handlers;\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook;\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined;\n    const left = maybe || (all[hook] = {});\n    const right = extension[hook];\n    /** @type {keyof Handles} */\n    let type;\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type];\n      }\n    }\n  }\n}","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex = /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/;","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport { unicodePunctuationRegex } from './lib/unicode-punctuation-regex.js';\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  /** @type {Token} */\n  let previous;\n  return contentStart;\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return factorySpace(effects, contentStart, 'linePrefix');\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph');\n    return lineStart(code);\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    });\n    if (previous) {\n      previous.next = token;\n    }\n    previous = token;\n    return data(code);\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText');\n      effects.exit('paragraph');\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit('chunkText');\n      return lineStart;\n    }\n\n    // Data.\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n};\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this;\n  /** @type {Array<StackItem>} */\n  const stack = [];\n  let continued = 0;\n  /** @type {TokenizeContext | undefined} */\n  let childFlow;\n  /** @type {Token | undefined} */\n  let childToken;\n  /** @type {number} */\n  let lineStartOffset;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued];\n      self.containerState = item[1];\n      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\n    }\n\n    // Done.\n    return checkNewContainers(code);\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++;\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined;\n      if (childFlow) {\n        closeFlow();\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === 'chunkFlow') {\n          point = self.events[indexBeforeFlow][1].end;\n          break;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      let index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point);\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n      return checkNewContainers(code);\n    }\n    return start(code);\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code);\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code);\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\n    }\n\n    // Check if there is a new container.\n    self.containerState = {};\n    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow();\n    exitContainers(continued);\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length;\n    lineStartOffset = self.now().offset;\n    return flowStart(code);\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {};\n    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++;\n    stack.push([self.currentConstruct, self.containerState]);\n    // Try another.\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow();\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    childFlow = childFlow || self.parser.flow(self.now());\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    });\n    return flowContinue(code);\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true);\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      writeToChild(effects.exit('chunkFlow'));\n      // Get ready for the next line.\n      continued = 0;\n      self.interrupt = undefined;\n      return start;\n    }\n    effects.consume(code);\n    return flowContinue;\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token);\n    if (eof) stream.push(null);\n    token.previous = childToken;\n    if (childToken) childToken.next = token;\n    childToken = token;\n    childFlow.defineSkip(token.start);\n    childFlow.write(stream);\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length;\n      while (index--) {\n        if (\n        // The token starts before the line ending…\n        childFlow.events[index][1].start.offset < lineStartOffset && (\n        // …and either is not ended yet…\n        !childFlow.events[index][1].end ||\n        // …or ends after it.\n        childFlow.events[index][1].end.offset > lineStartOffset)) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return;\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {boolean | undefined} */\n      let seen;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === 'chunkFlow') {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end;\n            break;\n          }\n          seen = true;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point);\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length;\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index];\n      self.containerState = entry[1];\n      entry[0].exit.call(self, effects);\n    }\n    stack.length = size;\n  }\n  function closeFlow() {\n    childFlow.write([null]);\n    childToken = undefined;\n    childFlow = undefined;\n    self.containerState._closeFlow = undefined;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok, nok), 'linePrefix', this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, 'linePrefix')(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport { splice } from 'micromark-util-chunked';\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events[index];\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === 'chunkFlow' && events[index - 1][1].type === 'listItemPrefix') {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === 'lineEndingBlank') {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === 'content') {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break;\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events[otherIndex];\n        if (otherEvent[1].type === 'lineEnding' || otherEvent[1].type === 'lineEndingBlank') {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank';\n            }\n            otherEvent[1].type = 'lineEnding';\n            lineIndex = otherIndex;\n          }\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start);\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        splice(events, lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1];\n  const context = events[eventIndex][2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.unshift([start, start + slice.length - 1]);\n    splice(events, start, 2, slice);\n  }\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content');\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent');\n    effects.exit('content');\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit('chunkContent');\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent');\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return factorySpace(effects, prefixed, 'linePrefix');\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === 'linePrefix' && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport { blankLine, content } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this;\n  const initial = effects.attempt(\n  // Try to parse a blank line.\n  blankLine, atBlankEnding,\n  // Try to parse initial flow (essentially, only code).\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), 'linePrefix')));\n  return initial;\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter('lineEndingBlank');\n    effects.consume(code);\n    effects.exit('lineEndingBlank');\n    self.currentConstruct = undefined;\n    return initial;\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    self.currentConstruct = undefined;\n    return initial;\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n};\nexport const string = initializeFactory('string');\nexport const text = initializeFactory('text');\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined)\n  };\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this;\n    const constructs = this.parser.constructs[field];\n    const text = effects.attempt(constructs, start, notText);\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code);\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code);\n        return;\n      }\n      effects.enter('data');\n      effects.consume(code);\n      return data;\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data');\n        return text(code);\n      }\n\n      // Data.\n      effects.consume(code);\n      return data;\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true;\n      }\n      const list = constructs[code];\n      let index = -1;\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index];\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText;\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1;\n    /** @type {number | undefined} */\n    let enter;\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index;\n          index++;\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end;\n          events.splice(enter + 2, index - enter - 2);\n          index = enter + 2;\n        }\n        enter = undefined;\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events;\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0; // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if ((eventIndex === events.length || events[eventIndex][1].type === 'lineEnding') && events[eventIndex - 1][1].type === 'data') {\n      const data = events[eventIndex - 1][1];\n      const chunks = context.sliceStream(data);\n      let index = chunks.length;\n      let bufferIndex = -1;\n      let size = 0;\n      /** @type {boolean | undefined} */\n      let tabs;\n      while (index--) {\n        const chunk = chunks[index];\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length;\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++;\n            bufferIndex--;\n          }\n          if (bufferIndex) break;\n          bufferIndex = -1;\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true;\n          size++;\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++;\n          break;\n        }\n      }\n      if (size) {\n        const token = {\n          type: eventIndex === events.length || tabs || size < 2 ? 'lineSuffix' : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        };\n        data.end = Object.assign({}, token.start);\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token);\n        } else {\n          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);\n          eventIndex += 2;\n        }\n      }\n      eventIndex++;\n    }\n  }\n  return events;\n}","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = [];\n  let index = -1;\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll;\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context);\n      called.push(resolve);\n    }\n  }\n  return events;\n}","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(from ? Object.assign({}, from) : {\n    line: 1,\n    column: 1,\n    offset: 0\n  }, {\n    _index: 0,\n    _bufferIndex: -1\n  });\n  /** @type {Record<string, number>} */\n  const columnStart = {};\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = [];\n  /** @type {Array<Chunk>} */\n  let chunks = [];\n  /** @type {Array<Token>} */\n  let stack = [];\n  /** @type {boolean | undefined} */\n  let consumed = true;\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  };\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  };\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects);\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode;\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize);\n  }\n  return context;\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice);\n    main();\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return [];\n    }\n    addResult(initialize, 0);\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context);\n    return context.events;\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs);\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token);\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    } = point;\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    };\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column;\n    accountForPotentialSkip();\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex;\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index];\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index;\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0;\n        }\n        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {\n          go(chunk.charCodeAt(point._bufferIndex));\n        }\n      } else {\n        go(chunk);\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined;\n    expectedCode = code;\n    state = state(code);\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++;\n      point.column = 1;\n      point.offset += code === -3 ? 2 : 1;\n      accountForPotentialSkip();\n    } else if (code !== -1) {\n      point.column++;\n      point.offset++;\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++;\n    } else {\n      point._bufferIndex++;\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1;\n        point._index++;\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code;\n\n    // Mark as consumed.\n    consumed = true;\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {};\n    token.type = type;\n    token.start = now();\n    context.events.push(['enter', token, context]);\n    stack.push(token);\n    return token;\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop();\n    token.end = now();\n    context.events.push(['exit', token, context]);\n    return token;\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from);\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore();\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook;\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs;\n      /** @type {number} */\n      let constructIndex;\n      /** @type {Construct} */\n      let currentConstruct;\n      /** @type {Info} */\n      let info;\n      return Array.isArray(constructs) /* c8 ignore next 1 */ ? handleListOfConstructs(constructs) : 'tokenize' in constructs ?\n      // @ts-expect-error Looks like a construct.\n      handleListOfConstructs([constructs]) : handleMapOfConstructs(constructs);\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code];\n          const all = code !== null && map.null;\n          const list = [\n          // To do: add more extension tests.\n          /* c8 ignore next 2 */\n          ...(Array.isArray(def) ? def : def ? [def] : []), ...(Array.isArray(all) ? all : all ? [all] : [])];\n          return handleListOfConstructs(list)(code);\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list;\n        constructIndex = 0;\n        if (list.length === 0) {\n          return bogusState;\n        }\n        return handleConstruct(list[constructIndex]);\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store();\n          currentConstruct = construct;\n          if (!construct.partial) {\n            context.currentConstruct = construct;\n          }\n\n          // Always populated by defaults.\n\n          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {\n            return nok(code);\n          }\n          return construct.tokenize.call(\n          // If we do have fields, create an object w/ `context` as its\n          // prototype.\n          // This allows a “live binding”, which is needed for `interrupt`.\n          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true;\n        onreturn(currentConstruct, info);\n        return returnState;\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true;\n        info.restore();\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex]);\n        }\n        return bogusState;\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct);\n    }\n    if (construct.resolve) {\n      splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context);\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now();\n    const startPrevious = context.previous;\n    const startCurrentConstruct = context.currentConstruct;\n    const startEventsIndex = context.events.length;\n    const startStack = Array.from(stack);\n    return {\n      restore,\n      from: startEventsIndex\n    };\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint;\n      context.previous = startPrevious;\n      context.currentConstruct = startCurrentConstruct;\n      context.events.length = startEventsIndex;\n      stack = startStack;\n      accountForPotentialSkip();\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line];\n      point.offset += columnStart[point.line] - 1;\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index;\n  const startBufferIndex = token.start._bufferIndex;\n  const endIndex = token.end._index;\n  const endBufferIndex = token.end._bufferIndex;\n  /** @type {Array<Chunk>} */\n  let view;\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\n  } else {\n    view = chunks.slice(startIndex, endIndex);\n    if (startBufferIndex > -1) {\n      const head = view[0];\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex);\n      } else {\n        view.shift();\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n  }\n  return view;\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1;\n  /** @type {Array<string>} */\n  const result = [];\n  /** @type {boolean | undefined} */\n  let atTab;\n  while (++index < chunks.length) {\n    const chunk = chunks[index];\n    /** @type {string} */\n    let value;\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case -5:\n        {\n          value = '\\r';\n          break;\n        }\n      case -4:\n        {\n          value = '\\n';\n          break;\n        }\n      case -3:\n        {\n          value = '\\r' + '\\n';\n          break;\n        }\n      case -2:\n        {\n          value = expandTabs ? ' ' : '\\t';\n          break;\n        }\n      case -1:\n        {\n          if (!expandTabs && atTab) continue;\n          value = ' ';\n          break;\n        }\n      default:\n        {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk);\n        }\n    }\n    atTab = chunk === -2;\n    result.push(value);\n  }\n  return result.join('');\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak');\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence');\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak');\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit('thematicBreakSequence');\n    return markdownSpace(code) ? factorySpace(effects, atBreak, 'whitespace')(code) : atBreak(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === 'linePrefix' ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? 'listUnordered' : 'listOrdered');\n    if (kind === 'listUnordered' ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix');\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix');\n        effects.enter('listItemValue');\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit('listItemValue');\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker');\n    effects.consume(code);\n    effects.exit('listItemMarker');\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace');\n      effects.consume(code);\n      effects.exit('listItemPrefixWhitespace');\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit('listItemPrefix'), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, 'listItemIndent', self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), 'linePrefix', self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, 'listItemIndent', self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'listItemIndent' && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, 'listItemPrefixWhitespace', self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === 'listItemPrefixWhitespace' ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter('blockQuotePrefix');\n      effects.enter('blockQuoteMarker');\n      effects.consume(code);\n      effects.exit('blockQuoteMarker');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace');\n      effects.consume(code);\n      effects.exit('blockQuotePrefixWhitespace');\n      effects.exit('blockQuotePrefix');\n      return ok;\n    }\n    effects.exit('blockQuotePrefix');\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, 'linePrefix', self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote');\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport { asciiControl, markdownLineEndingOrSpace, markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {\n  const limit = max || Number.POSITIVE_INFINITY;\n  let balance = 0;\n  return start;\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type);\n      effects.enter(literalType);\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      return enclosedBefore;\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.enter(type);\n    effects.enter(rawType);\n    effects.enter(stringType);\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return raw(code);\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      effects.exit(literalType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return enclosed(code);\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString');\n      effects.exit(stringType);\n      return enclosedBefore(code);\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? enclosedEscape : enclosed;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code);\n      return enclosed;\n    }\n    return enclosed(code);\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (!balance && (code === null || code === 41 || markdownLineEndingOrSpace(code))) {\n      effects.exit('chunkString');\n      effects.exit(stringType);\n      effects.exit(rawType);\n      effects.exit(type);\n      return ok(code);\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code);\n      balance++;\n      return raw;\n    }\n    if (code === 41) {\n      effects.consume(code);\n      balance--;\n      return raw;\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? rawEscape : raw;\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code);\n      return raw;\n    }\n    return raw(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (size > 999 || code === null || code === 91 || code === 93 && !seen ||\n    // To do: remove in the future once we’ve switched from\n    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n    // which doesn’t need this.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return atBreak;\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return labelInside(code);\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\n      effects.exit('chunkString');\n      return atBreak(code);\n    }\n    effects.consume(code);\n    if (!seen) seen = !markdownSpace(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      marker = code === 40 ? 41 : code;\n      return begin;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    return atBreak(code);\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return begin(marker);\n    }\n    if (code === null) {\n      return nok(code);\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return factorySpace(effects, atBreak, 'linePrefix');\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return inside(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString');\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? escape : inside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code);\n      return inside;\n    }\n    return inside(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      seen = true;\n      return start;\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, start, seen ? 'linePrefix' : 'lineSuffix')(code);\n    }\n    return ok(code);\n  }\n}","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return value\n  // Collapse markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, ' ')\n  // Trim.\n  .replace(/^ | $/g, '')\n  // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition');\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, 'definitionLabel', 'definitionLabelMarker', 'definitionLabelString')(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker');\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, 'definitionDestination', 'definitionDestinationLiteral', 'definitionDestinationLiteralMarker', 'definitionDestinationRaw', 'definitionDestinationString')(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, 'whitespace')(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition');\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, 'definitionTitle', 'definitionTitleMarker', 'definitionTitleString')(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented');\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'linePrefix' && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter('codeFlowValue');\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue');\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented');\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'linePrefix' && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText';\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = Object.assign({}, events[definition][1].end);\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== 'lineEnding' && self.events[index][1].type !== 'linePrefix' && self.events[index][1].type !== 'content') {\n        paragraph = self.events[index][1].type === 'paragraph';\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine');\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence');\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit('setextHeadingLineSequence');\n    return markdownSpace(code) ? factorySpace(effects, after, 'lineSuffix')(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine');\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = ['address', 'article', 'aside', 'base', 'basefont', 'blockquote', 'body', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dialog', 'dir', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hr', 'html', 'iframe', 'legend', 'li', 'link', 'main', 'menu', 'menuitem', 'nav', 'noframes', 'ol', 'optgroup', 'option', 'p', 'param', 'search', 'section', 'summary', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul'];\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea'];","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n};\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow');\n    effects.enter('htmlFlowData');\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA[';\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData');\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData');\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter('htmlFlowData');\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData');\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow');\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === 'linePrefix' ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter('codeFenced');\n    effects.enter('codeFencedFence');\n    effects.enter('codeFencedFenceSequence');\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit('codeFencedFenceSequence');\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, 'whitespace')(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence');\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter('codeFencedFenceInfo');\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString');\n      effects.exit('codeFencedFenceInfo');\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString');\n      effects.exit('codeFencedFenceInfo');\n      return factorySpace(effects, metaBefore, 'whitespace')(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter('codeFencedFenceMeta');\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString');\n      effects.exit('codeFencedFenceMeta');\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, 'linePrefix', initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter('codeFlowValue');\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue');\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced');\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence');\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, 'linePrefix', self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence');\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence');\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence');\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/**\n * Map of named character references.\n *\n * @type {Record<string, string>}\n */\nexport const characterEntities = {\n  AElig: 'Æ',\n  AMP: '&',\n  Aacute: 'Á',\n  Abreve: 'Ă',\n  Acirc: 'Â',\n  Acy: 'А',\n  Afr: '𝔄',\n  Agrave: 'À',\n  Alpha: 'Α',\n  Amacr: 'Ā',\n  And: '⩓',\n  Aogon: 'Ą',\n  Aopf: '𝔸',\n  ApplyFunction: '⁡',\n  Aring: 'Å',\n  Ascr: '𝒜',\n  Assign: '≔',\n  Atilde: 'Ã',\n  Auml: 'Ä',\n  Backslash: '∖',\n  Barv: '⫧',\n  Barwed: '⌆',\n  Bcy: 'Б',\n  Because: '∵',\n  Bernoullis: 'ℬ',\n  Beta: 'Β',\n  Bfr: '𝔅',\n  Bopf: '𝔹',\n  Breve: '˘',\n  Bscr: 'ℬ',\n  Bumpeq: '≎',\n  CHcy: 'Ч',\n  COPY: '©',\n  Cacute: 'Ć',\n  Cap: '⋒',\n  CapitalDifferentialD: 'ⅅ',\n  Cayleys: 'ℭ',\n  Ccaron: 'Č',\n  Ccedil: 'Ç',\n  Ccirc: 'Ĉ',\n  Cconint: '∰',\n  Cdot: 'Ċ',\n  Cedilla: '¸',\n  CenterDot: '·',\n  Cfr: 'ℭ',\n  Chi: 'Χ',\n  CircleDot: '⊙',\n  CircleMinus: '⊖',\n  CirclePlus: '⊕',\n  CircleTimes: '⊗',\n  ClockwiseContourIntegral: '∲',\n  CloseCurlyDoubleQuote: '”',\n  CloseCurlyQuote: '’',\n  Colon: '∷',\n  Colone: '⩴',\n  Congruent: '≡',\n  Conint: '∯',\n  ContourIntegral: '∮',\n  Copf: 'ℂ',\n  Coproduct: '∐',\n  CounterClockwiseContourIntegral: '∳',\n  Cross: '⨯',\n  Cscr: '𝒞',\n  Cup: '⋓',\n  CupCap: '≍',\n  DD: 'ⅅ',\n  DDotrahd: '⤑',\n  DJcy: 'Ђ',\n  DScy: 'Ѕ',\n  DZcy: 'Џ',\n  Dagger: '‡',\n  Darr: '↡',\n  Dashv: '⫤',\n  Dcaron: 'Ď',\n  Dcy: 'Д',\n  Del: '∇',\n  Delta: 'Δ',\n  Dfr: '𝔇',\n  DiacriticalAcute: '´',\n  DiacriticalDot: '˙',\n  DiacriticalDoubleAcute: '˝',\n  DiacriticalGrave: '`',\n  DiacriticalTilde: '˜',\n  Diamond: '⋄',\n  DifferentialD: 'ⅆ',\n  Dopf: '𝔻',\n  Dot: '¨',\n  DotDot: '⃜',\n  DotEqual: '≐',\n  DoubleContourIntegral: '∯',\n  DoubleDot: '¨',\n  DoubleDownArrow: '⇓',\n  DoubleLeftArrow: '⇐',\n  DoubleLeftRightArrow: '⇔',\n  DoubleLeftTee: '⫤',\n  DoubleLongLeftArrow: '⟸',\n  DoubleLongLeftRightArrow: '⟺',\n  DoubleLongRightArrow: '⟹',\n  DoubleRightArrow: '⇒',\n  DoubleRightTee: '⊨',\n  DoubleUpArrow: '⇑',\n  DoubleUpDownArrow: '⇕',\n  DoubleVerticalBar: '∥',\n  DownArrow: '↓',\n  DownArrowBar: '⤓',\n  DownArrowUpArrow: '⇵',\n  DownBreve: '̑',\n  DownLeftRightVector: '⥐',\n  DownLeftTeeVector: '⥞',\n  DownLeftVector: '↽',\n  DownLeftVectorBar: '⥖',\n  DownRightTeeVector: '⥟',\n  DownRightVector: '⇁',\n  DownRightVectorBar: '⥗',\n  DownTee: '⊤',\n  DownTeeArrow: '↧',\n  Downarrow: '⇓',\n  Dscr: '𝒟',\n  Dstrok: 'Đ',\n  ENG: 'Ŋ',\n  ETH: 'Ð',\n  Eacute: 'É',\n  Ecaron: 'Ě',\n  Ecirc: 'Ê',\n  Ecy: 'Э',\n  Edot: 'Ė',\n  Efr: '𝔈',\n  Egrave: 'È',\n  Element: '∈',\n  Emacr: 'Ē',\n  EmptySmallSquare: '◻',\n  EmptyVerySmallSquare: '▫',\n  Eogon: 'Ę',\n  Eopf: '𝔼',\n  Epsilon: 'Ε',\n  Equal: '⩵',\n  EqualTilde: '≂',\n  Equilibrium: '⇌',\n  Escr: 'ℰ',\n  Esim: '⩳',\n  Eta: 'Η',\n  Euml: 'Ë',\n  Exists: '∃',\n  ExponentialE: 'ⅇ',\n  Fcy: 'Ф',\n  Ffr: '𝔉',\n  FilledSmallSquare: '◼',\n  FilledVerySmallSquare: '▪',\n  Fopf: '𝔽',\n  ForAll: '∀',\n  Fouriertrf: 'ℱ',\n  Fscr: 'ℱ',\n  GJcy: 'Ѓ',\n  GT: '>',\n  Gamma: 'Γ',\n  Gammad: 'Ϝ',\n  Gbreve: 'Ğ',\n  Gcedil: 'Ģ',\n  Gcirc: 'Ĝ',\n  Gcy: 'Г',\n  Gdot: 'Ġ',\n  Gfr: '𝔊',\n  Gg: '⋙',\n  Gopf: '𝔾',\n  GreaterEqual: '≥',\n  GreaterEqualLess: '⋛',\n  GreaterFullEqual: '≧',\n  GreaterGreater: '⪢',\n  GreaterLess: '≷',\n  GreaterSlantEqual: '⩾',\n  GreaterTilde: '≳',\n  Gscr: '𝒢',\n  Gt: '≫',\n  HARDcy: 'Ъ',\n  Hacek: 'ˇ',\n  Hat: '^',\n  Hcirc: 'Ĥ',\n  Hfr: 'ℌ',\n  HilbertSpace: 'ℋ',\n  Hopf: 'ℍ',\n  HorizontalLine: '─',\n  Hscr: 'ℋ',\n  Hstrok: 'Ħ',\n  HumpDownHump: '≎',\n  HumpEqual: '≏',\n  IEcy: 'Е',\n  IJlig: 'Ĳ',\n  IOcy: 'Ё',\n  Iacute: 'Í',\n  Icirc: 'Î',\n  Icy: 'И',\n  Idot: 'İ',\n  Ifr: 'ℑ',\n  Igrave: 'Ì',\n  Im: 'ℑ',\n  Imacr: 'Ī',\n  ImaginaryI: 'ⅈ',\n  Implies: '⇒',\n  Int: '∬',\n  Integral: '∫',\n  Intersection: '⋂',\n  InvisibleComma: '⁣',\n  InvisibleTimes: '⁢',\n  Iogon: 'Į',\n  Iopf: '𝕀',\n  Iota: 'Ι',\n  Iscr: 'ℐ',\n  Itilde: 'Ĩ',\n  Iukcy: 'І',\n  Iuml: 'Ï',\n  Jcirc: 'Ĵ',\n  Jcy: 'Й',\n  Jfr: '𝔍',\n  Jopf: '𝕁',\n  Jscr: '𝒥',\n  Jsercy: 'Ј',\n  Jukcy: 'Є',\n  KHcy: 'Х',\n  KJcy: 'Ќ',\n  Kappa: 'Κ',\n  Kcedil: 'Ķ',\n  Kcy: 'К',\n  Kfr: '𝔎',\n  Kopf: '𝕂',\n  Kscr: '𝒦',\n  LJcy: 'Љ',\n  LT: '<',\n  Lacute: 'Ĺ',\n  Lambda: 'Λ',\n  Lang: '⟪',\n  Laplacetrf: 'ℒ',\n  Larr: '↞',\n  Lcaron: 'Ľ',\n  Lcedil: 'Ļ',\n  Lcy: 'Л',\n  LeftAngleBracket: '⟨',\n  LeftArrow: '←',\n  LeftArrowBar: '⇤',\n  LeftArrowRightArrow: '⇆',\n  LeftCeiling: '⌈',\n  LeftDoubleBracket: '⟦',\n  LeftDownTeeVector: '⥡',\n  LeftDownVector: '⇃',\n  LeftDownVectorBar: '⥙',\n  LeftFloor: '⌊',\n  LeftRightArrow: '↔',\n  LeftRightVector: '⥎',\n  LeftTee: '⊣',\n  LeftTeeArrow: '↤',\n  LeftTeeVector: '⥚',\n  LeftTriangle: '⊲',\n  LeftTriangleBar: '⧏',\n  LeftTriangleEqual: '⊴',\n  LeftUpDownVector: '⥑',\n  LeftUpTeeVector: '⥠',\n  LeftUpVector: '↿',\n  LeftUpVectorBar: '⥘',\n  LeftVector: '↼',\n  LeftVectorBar: '⥒',\n  Leftarrow: '⇐',\n  Leftrightarrow: '⇔',\n  LessEqualGreater: '⋚',\n  LessFullEqual: '≦',\n  LessGreater: '≶',\n  LessLess: '⪡',\n  LessSlantEqual: '⩽',\n  LessTilde: '≲',\n  Lfr: '𝔏',\n  Ll: '⋘',\n  Lleftarrow: '⇚',\n  Lmidot: 'Ŀ',\n  LongLeftArrow: '⟵',\n  LongLeftRightArrow: '⟷',\n  LongRightArrow: '⟶',\n  Longleftarrow: '⟸',\n  Longleftrightarrow: '⟺',\n  Longrightarrow: '⟹',\n  Lopf: '𝕃',\n  LowerLeftArrow: '↙',\n  LowerRightArrow: '↘',\n  Lscr: 'ℒ',\n  Lsh: '↰',\n  Lstrok: 'Ł',\n  Lt: '≪',\n  Map: '⤅',\n  Mcy: 'М',\n  MediumSpace: ' ',\n  Mellintrf: 'ℳ',\n  Mfr: '𝔐',\n  MinusPlus: '∓',\n  Mopf: '𝕄',\n  Mscr: 'ℳ',\n  Mu: 'Μ',\n  NJcy: 'Њ',\n  Nacute: 'Ń',\n  Ncaron: 'Ň',\n  Ncedil: 'Ņ',\n  Ncy: 'Н',\n  NegativeMediumSpace: '​',\n  NegativeThickSpace: '​',\n  NegativeThinSpace: '​',\n  NegativeVeryThinSpace: '​',\n  NestedGreaterGreater: '≫',\n  NestedLessLess: '≪',\n  NewLine: '\\n',\n  Nfr: '𝔑',\n  NoBreak: '⁠',\n  NonBreakingSpace: ' ',\n  Nopf: 'ℕ',\n  Not: '⫬',\n  NotCongruent: '≢',\n  NotCupCap: '≭',\n  NotDoubleVerticalBar: '∦',\n  NotElement: '∉',\n  NotEqual: '≠',\n  NotEqualTilde: '≂̸',\n  NotExists: '∄',\n  NotGreater: '≯',\n  NotGreaterEqual: '≱',\n  NotGreaterFullEqual: '≧̸',\n  NotGreaterGreater: '≫̸',\n  NotGreaterLess: '≹',\n  NotGreaterSlantEqual: '⩾̸',\n  NotGreaterTilde: '≵',\n  NotHumpDownHump: '≎̸',\n  NotHumpEqual: '≏̸',\n  NotLeftTriangle: '⋪',\n  NotLeftTriangleBar: '⧏̸',\n  NotLeftTriangleEqual: '⋬',\n  NotLess: '≮',\n  NotLessEqual: '≰',\n  NotLessGreater: '≸',\n  NotLessLess: '≪̸',\n  NotLessSlantEqual: '⩽̸',\n  NotLessTilde: '≴',\n  NotNestedGreaterGreater: '⪢̸',\n  NotNestedLessLess: '⪡̸',\n  NotPrecedes: '⊀',\n  NotPrecedesEqual: '⪯̸',\n  NotPrecedesSlantEqual: '⋠',\n  NotReverseElement: '∌',\n  NotRightTriangle: '⋫',\n  NotRightTriangleBar: '⧐̸',\n  NotRightTriangleEqual: '⋭',\n  NotSquareSubset: '⊏̸',\n  NotSquareSubsetEqual: '⋢',\n  NotSquareSuperset: '⊐̸',\n  NotSquareSupersetEqual: '⋣',\n  NotSubset: '⊂⃒',\n  NotSubsetEqual: '⊈',\n  NotSucceeds: '⊁',\n  NotSucceedsEqual: '⪰̸',\n  NotSucceedsSlantEqual: '⋡',\n  NotSucceedsTilde: '≿̸',\n  NotSuperset: '⊃⃒',\n  NotSupersetEqual: '⊉',\n  NotTilde: '≁',\n  NotTildeEqual: '≄',\n  NotTildeFullEqual: '≇',\n  NotTildeTilde: '≉',\n  NotVerticalBar: '∤',\n  Nscr: '𝒩',\n  Ntilde: 'Ñ',\n  Nu: 'Ν',\n  OElig: 'Œ',\n  Oacute: 'Ó',\n  Ocirc: 'Ô',\n  Ocy: 'О',\n  Odblac: 'Ő',\n  Ofr: '𝔒',\n  Ograve: 'Ò',\n  Omacr: 'Ō',\n  Omega: 'Ω',\n  Omicron: 'Ο',\n  Oopf: '𝕆',\n  OpenCurlyDoubleQuote: '“',\n  OpenCurlyQuote: '‘',\n  Or: '⩔',\n  Oscr: '𝒪',\n  Oslash: 'Ø',\n  Otilde: 'Õ',\n  Otimes: '⨷',\n  Ouml: 'Ö',\n  OverBar: '‾',\n  OverBrace: '⏞',\n  OverBracket: '⎴',\n  OverParenthesis: '⏜',\n  PartialD: '∂',\n  Pcy: 'П',\n  Pfr: '𝔓',\n  Phi: 'Φ',\n  Pi: 'Π',\n  PlusMinus: '±',\n  Poincareplane: 'ℌ',\n  Popf: 'ℙ',\n  Pr: '⪻',\n  Precedes: '≺',\n  PrecedesEqual: '⪯',\n  PrecedesSlantEqual: '≼',\n  PrecedesTilde: '≾',\n  Prime: '″',\n  Product: '∏',\n  Proportion: '∷',\n  Proportional: '∝',\n  Pscr: '𝒫',\n  Psi: 'Ψ',\n  QUOT: '\"',\n  Qfr: '𝔔',\n  Qopf: 'ℚ',\n  Qscr: '𝒬',\n  RBarr: '⤐',\n  REG: '®',\n  Racute: 'Ŕ',\n  Rang: '⟫',\n  Rarr: '↠',\n  Rarrtl: '⤖',\n  Rcaron: 'Ř',\n  Rcedil: 'Ŗ',\n  Rcy: 'Р',\n  Re: 'ℜ',\n  ReverseElement: '∋',\n  ReverseEquilibrium: '⇋',\n  ReverseUpEquilibrium: '⥯',\n  Rfr: 'ℜ',\n  Rho: 'Ρ',\n  RightAngleBracket: '⟩',\n  RightArrow: '→',\n  RightArrowBar: '⇥',\n  RightArrowLeftArrow: '⇄',\n  RightCeiling: '⌉',\n  RightDoubleBracket: '⟧',\n  RightDownTeeVector: '⥝',\n  RightDownVector: '⇂',\n  RightDownVectorBar: '⥕',\n  RightFloor: '⌋',\n  RightTee: '⊢',\n  RightTeeArrow: '↦',\n  RightTeeVector: '⥛',\n  RightTriangle: '⊳',\n  RightTriangleBar: '⧐',\n  RightTriangleEqual: '⊵',\n  RightUpDownVector: '⥏',\n  RightUpTeeVector: '⥜',\n  RightUpVector: '↾',\n  RightUpVectorBar: '⥔',\n  RightVector: '⇀',\n  RightVectorBar: '⥓',\n  Rightarrow: '⇒',\n  Ropf: 'ℝ',\n  RoundImplies: '⥰',\n  Rrightarrow: '⇛',\n  Rscr: 'ℛ',\n  Rsh: '↱',\n  RuleDelayed: '⧴',\n  SHCHcy: 'Щ',\n  SHcy: 'Ш',\n  SOFTcy: 'Ь',\n  Sacute: 'Ś',\n  Sc: '⪼',\n  Scaron: 'Š',\n  Scedil: 'Ş',\n  Scirc: 'Ŝ',\n  Scy: 'С',\n  Sfr: '𝔖',\n  ShortDownArrow: '↓',\n  ShortLeftArrow: '←',\n  ShortRightArrow: '→',\n  ShortUpArrow: '↑',\n  Sigma: 'Σ',\n  SmallCircle: '∘',\n  Sopf: '𝕊',\n  Sqrt: '√',\n  Square: '□',\n  SquareIntersection: '⊓',\n  SquareSubset: '⊏',\n  SquareSubsetEqual: '⊑',\n  SquareSuperset: '⊐',\n  SquareSupersetEqual: '⊒',\n  SquareUnion: '⊔',\n  Sscr: '𝒮',\n  Star: '⋆',\n  Sub: '⋐',\n  Subset: '⋐',\n  SubsetEqual: '⊆',\n  Succeeds: '≻',\n  SucceedsEqual: '⪰',\n  SucceedsSlantEqual: '≽',\n  SucceedsTilde: '≿',\n  SuchThat: '∋',\n  Sum: '∑',\n  Sup: '⋑',\n  Superset: '⊃',\n  SupersetEqual: '⊇',\n  Supset: '⋑',\n  THORN: 'Þ',\n  TRADE: '™',\n  TSHcy: 'Ћ',\n  TScy: 'Ц',\n  Tab: '\\t',\n  Tau: 'Τ',\n  Tcaron: 'Ť',\n  Tcedil: 'Ţ',\n  Tcy: 'Т',\n  Tfr: '𝔗',\n  Therefore: '∴',\n  Theta: 'Θ',\n  ThickSpace: '  ',\n  ThinSpace: ' ',\n  Tilde: '∼',\n  TildeEqual: '≃',\n  TildeFullEqual: '≅',\n  TildeTilde: '≈',\n  Topf: '𝕋',\n  TripleDot: '⃛',\n  Tscr: '𝒯',\n  Tstrok: 'Ŧ',\n  Uacute: 'Ú',\n  Uarr: '↟',\n  Uarrocir: '⥉',\n  Ubrcy: 'Ў',\n  Ubreve: 'Ŭ',\n  Ucirc: 'Û',\n  Ucy: 'У',\n  Udblac: 'Ű',\n  Ufr: '𝔘',\n  Ugrave: 'Ù',\n  Umacr: 'Ū',\n  UnderBar: '_',\n  UnderBrace: '⏟',\n  UnderBracket: '⎵',\n  UnderParenthesis: '⏝',\n  Union: '⋃',\n  UnionPlus: '⊎',\n  Uogon: 'Ų',\n  Uopf: '𝕌',\n  UpArrow: '↑',\n  UpArrowBar: '⤒',\n  UpArrowDownArrow: '⇅',\n  UpDownArrow: '↕',\n  UpEquilibrium: '⥮',\n  UpTee: '⊥',\n  UpTeeArrow: '↥',\n  Uparrow: '⇑',\n  Updownarrow: '⇕',\n  UpperLeftArrow: '↖',\n  UpperRightArrow: '↗',\n  Upsi: 'ϒ',\n  Upsilon: 'Υ',\n  Uring: 'Ů',\n  Uscr: '𝒰',\n  Utilde: 'Ũ',\n  Uuml: 'Ü',\n  VDash: '⊫',\n  Vbar: '⫫',\n  Vcy: 'В',\n  Vdash: '⊩',\n  Vdashl: '⫦',\n  Vee: '⋁',\n  Verbar: '‖',\n  Vert: '‖',\n  VerticalBar: '∣',\n  VerticalLine: '|',\n  VerticalSeparator: '❘',\n  VerticalTilde: '≀',\n  VeryThinSpace: ' ',\n  Vfr: '𝔙',\n  Vopf: '𝕍',\n  Vscr: '𝒱',\n  Vvdash: '⊪',\n  Wcirc: 'Ŵ',\n  Wedge: '⋀',\n  Wfr: '𝔚',\n  Wopf: '𝕎',\n  Wscr: '𝒲',\n  Xfr: '𝔛',\n  Xi: 'Ξ',\n  Xopf: '𝕏',\n  Xscr: '𝒳',\n  YAcy: 'Я',\n  YIcy: 'Ї',\n  YUcy: 'Ю',\n  Yacute: 'Ý',\n  Ycirc: 'Ŷ',\n  Ycy: 'Ы',\n  Yfr: '𝔜',\n  Yopf: '𝕐',\n  Yscr: '𝒴',\n  Yuml: 'Ÿ',\n  ZHcy: 'Ж',\n  Zacute: 'Ź',\n  Zcaron: 'Ž',\n  Zcy: 'З',\n  Zdot: 'Ż',\n  ZeroWidthSpace: '​',\n  Zeta: 'Ζ',\n  Zfr: 'ℨ',\n  Zopf: 'ℤ',\n  Zscr: '𝒵',\n  aacute: 'á',\n  abreve: 'ă',\n  ac: '∾',\n  acE: '∾̳',\n  acd: '∿',\n  acirc: 'â',\n  acute: '´',\n  acy: 'а',\n  aelig: 'æ',\n  af: '⁡',\n  afr: '𝔞',\n  agrave: 'à',\n  alefsym: 'ℵ',\n  aleph: 'ℵ',\n  alpha: 'α',\n  amacr: 'ā',\n  amalg: '⨿',\n  amp: '&',\n  and: '∧',\n  andand: '⩕',\n  andd: '⩜',\n  andslope: '⩘',\n  andv: '⩚',\n  ang: '∠',\n  ange: '⦤',\n  angle: '∠',\n  angmsd: '∡',\n  angmsdaa: '⦨',\n  angmsdab: '⦩',\n  angmsdac: '⦪',\n  angmsdad: '⦫',\n  angmsdae: '⦬',\n  angmsdaf: '⦭',\n  angmsdag: '⦮',\n  angmsdah: '⦯',\n  angrt: '∟',\n  angrtvb: '⊾',\n  angrtvbd: '⦝',\n  angsph: '∢',\n  angst: 'Å',\n  angzarr: '⍼',\n  aogon: 'ą',\n  aopf: '𝕒',\n  ap: '≈',\n  apE: '⩰',\n  apacir: '⩯',\n  ape: '≊',\n  apid: '≋',\n  apos: \"'\",\n  approx: '≈',\n  approxeq: '≊',\n  aring: 'å',\n  ascr: '𝒶',\n  ast: '*',\n  asymp: '≈',\n  asympeq: '≍',\n  atilde: 'ã',\n  auml: 'ä',\n  awconint: '∳',\n  awint: '⨑',\n  bNot: '⫭',\n  backcong: '≌',\n  backepsilon: '϶',\n  backprime: '‵',\n  backsim: '∽',\n  backsimeq: '⋍',\n  barvee: '⊽',\n  barwed: '⌅',\n  barwedge: '⌅',\n  bbrk: '⎵',\n  bbrktbrk: '⎶',\n  bcong: '≌',\n  bcy: 'б',\n  bdquo: '„',\n  becaus: '∵',\n  because: '∵',\n  bemptyv: '⦰',\n  bepsi: '϶',\n  bernou: 'ℬ',\n  beta: 'β',\n  beth: 'ℶ',\n  between: '≬',\n  bfr: '𝔟',\n  bigcap: '⋂',\n  bigcirc: '◯',\n  bigcup: '⋃',\n  bigodot: '⨀',\n  bigoplus: '⨁',\n  bigotimes: '⨂',\n  bigsqcup: '⨆',\n  bigstar: '★',\n  bigtriangledown: '▽',\n  bigtriangleup: '△',\n  biguplus: '⨄',\n  bigvee: '⋁',\n  bigwedge: '⋀',\n  bkarow: '⤍',\n  blacklozenge: '⧫',\n  blacksquare: '▪',\n  blacktriangle: '▴',\n  blacktriangledown: '▾',\n  blacktriangleleft: '◂',\n  blacktriangleright: '▸',\n  blank: '␣',\n  blk12: '▒',\n  blk14: '░',\n  blk34: '▓',\n  block: '█',\n  bne: '=⃥',\n  bnequiv: '≡⃥',\n  bnot: '⌐',\n  bopf: '𝕓',\n  bot: '⊥',\n  bottom: '⊥',\n  bowtie: '⋈',\n  boxDL: '╗',\n  boxDR: '╔',\n  boxDl: '╖',\n  boxDr: '╓',\n  boxH: '═',\n  boxHD: '╦',\n  boxHU: '╩',\n  boxHd: '╤',\n  boxHu: '╧',\n  boxUL: '╝',\n  boxUR: '╚',\n  boxUl: '╜',\n  boxUr: '╙',\n  boxV: '║',\n  boxVH: '╬',\n  boxVL: '╣',\n  boxVR: '╠',\n  boxVh: '╫',\n  boxVl: '╢',\n  boxVr: '╟',\n  boxbox: '⧉',\n  boxdL: '╕',\n  boxdR: '╒',\n  boxdl: '┐',\n  boxdr: '┌',\n  boxh: '─',\n  boxhD: '╥',\n  boxhU: '╨',\n  boxhd: '┬',\n  boxhu: '┴',\n  boxminus: '⊟',\n  boxplus: '⊞',\n  boxtimes: '⊠',\n  boxuL: '╛',\n  boxuR: '╘',\n  boxul: '┘',\n  boxur: '└',\n  boxv: '│',\n  boxvH: '╪',\n  boxvL: '╡',\n  boxvR: '╞',\n  boxvh: '┼',\n  boxvl: '┤',\n  boxvr: '├',\n  bprime: '‵',\n  breve: '˘',\n  brvbar: '¦',\n  bscr: '𝒷',\n  bsemi: '⁏',\n  bsim: '∽',\n  bsime: '⋍',\n  bsol: '\\\\',\n  bsolb: '⧅',\n  bsolhsub: '⟈',\n  bull: '•',\n  bullet: '•',\n  bump: '≎',\n  bumpE: '⪮',\n  bumpe: '≏',\n  bumpeq: '≏',\n  cacute: 'ć',\n  cap: '∩',\n  capand: '⩄',\n  capbrcup: '⩉',\n  capcap: '⩋',\n  capcup: '⩇',\n  capdot: '⩀',\n  caps: '∩︀',\n  caret: '⁁',\n  caron: 'ˇ',\n  ccaps: '⩍',\n  ccaron: 'č',\n  ccedil: 'ç',\n  ccirc: 'ĉ',\n  ccups: '⩌',\n  ccupssm: '⩐',\n  cdot: 'ċ',\n  cedil: '¸',\n  cemptyv: '⦲',\n  cent: '¢',\n  centerdot: '·',\n  cfr: '𝔠',\n  chcy: 'ч',\n  check: '✓',\n  checkmark: '✓',\n  chi: 'χ',\n  cir: '○',\n  cirE: '⧃',\n  circ: 'ˆ',\n  circeq: '≗',\n  circlearrowleft: '↺',\n  circlearrowright: '↻',\n  circledR: '®',\n  circledS: 'Ⓢ',\n  circledast: '⊛',\n  circledcirc: '⊚',\n  circleddash: '⊝',\n  cire: '≗',\n  cirfnint: '⨐',\n  cirmid: '⫯',\n  cirscir: '⧂',\n  clubs: '♣',\n  clubsuit: '♣',\n  colon: ':',\n  colone: '≔',\n  coloneq: '≔',\n  comma: ',',\n  commat: '@',\n  comp: '∁',\n  compfn: '∘',\n  complement: '∁',\n  complexes: 'ℂ',\n  cong: '≅',\n  congdot: '⩭',\n  conint: '∮',\n  copf: '𝕔',\n  coprod: '∐',\n  copy: '©',\n  copysr: '℗',\n  crarr: '↵',\n  cross: '✗',\n  cscr: '𝒸',\n  csub: '⫏',\n  csube: '⫑',\n  csup: '⫐',\n  csupe: '⫒',\n  ctdot: '⋯',\n  cudarrl: '⤸',\n  cudarrr: '⤵',\n  cuepr: '⋞',\n  cuesc: '⋟',\n  cularr: '↶',\n  cularrp: '⤽',\n  cup: '∪',\n  cupbrcap: '⩈',\n  cupcap: '⩆',\n  cupcup: '⩊',\n  cupdot: '⊍',\n  cupor: '⩅',\n  cups: '∪︀',\n  curarr: '↷',\n  curarrm: '⤼',\n  curlyeqprec: '⋞',\n  curlyeqsucc: '⋟',\n  curlyvee: '⋎',\n  curlywedge: '⋏',\n  curren: '¤',\n  curvearrowleft: '↶',\n  curvearrowright: '↷',\n  cuvee: '⋎',\n  cuwed: '⋏',\n  cwconint: '∲',\n  cwint: '∱',\n  cylcty: '⌭',\n  dArr: '⇓',\n  dHar: '⥥',\n  dagger: '†',\n  daleth: 'ℸ',\n  darr: '↓',\n  dash: '‐',\n  dashv: '⊣',\n  dbkarow: '⤏',\n  dblac: '˝',\n  dcaron: 'ď',\n  dcy: 'д',\n  dd: 'ⅆ',\n  ddagger: '‡',\n  ddarr: '⇊',\n  ddotseq: '⩷',\n  deg: '°',\n  delta: 'δ',\n  demptyv: '⦱',\n  dfisht: '⥿',\n  dfr: '𝔡',\n  dharl: '⇃',\n  dharr: '⇂',\n  diam: '⋄',\n  diamond: '⋄',\n  diamondsuit: '♦',\n  diams: '♦',\n  die: '¨',\n  digamma: 'ϝ',\n  disin: '⋲',\n  div: '÷',\n  divide: '÷',\n  divideontimes: '⋇',\n  divonx: '⋇',\n  djcy: 'ђ',\n  dlcorn: '⌞',\n  dlcrop: '⌍',\n  dollar: '$',\n  dopf: '𝕕',\n  dot: '˙',\n  doteq: '≐',\n  doteqdot: '≑',\n  dotminus: '∸',\n  dotplus: '∔',\n  dotsquare: '⊡',\n  doublebarwedge: '⌆',\n  downarrow: '↓',\n  downdownarrows: '⇊',\n  downharpoonleft: '⇃',\n  downharpoonright: '⇂',\n  drbkarow: '⤐',\n  drcorn: '⌟',\n  drcrop: '⌌',\n  dscr: '𝒹',\n  dscy: 'ѕ',\n  dsol: '⧶',\n  dstrok: 'đ',\n  dtdot: '⋱',\n  dtri: '▿',\n  dtrif: '▾',\n  duarr: '⇵',\n  duhar: '⥯',\n  dwangle: '⦦',\n  dzcy: 'џ',\n  dzigrarr: '⟿',\n  eDDot: '⩷',\n  eDot: '≑',\n  eacute: 'é',\n  easter: '⩮',\n  ecaron: 'ě',\n  ecir: '≖',\n  ecirc: 'ê',\n  ecolon: '≕',\n  ecy: 'э',\n  edot: 'ė',\n  ee: 'ⅇ',\n  efDot: '≒',\n  efr: '𝔢',\n  eg: '⪚',\n  egrave: 'è',\n  egs: '⪖',\n  egsdot: '⪘',\n  el: '⪙',\n  elinters: '⏧',\n  ell: 'ℓ',\n  els: '⪕',\n  elsdot: '⪗',\n  emacr: 'ē',\n  empty: '∅',\n  emptyset: '∅',\n  emptyv: '∅',\n  emsp13: ' ',\n  emsp14: ' ',\n  emsp: ' ',\n  eng: 'ŋ',\n  ensp: ' ',\n  eogon: 'ę',\n  eopf: '𝕖',\n  epar: '⋕',\n  eparsl: '⧣',\n  eplus: '⩱',\n  epsi: 'ε',\n  epsilon: 'ε',\n  epsiv: 'ϵ',\n  eqcirc: '≖',\n  eqcolon: '≕',\n  eqsim: '≂',\n  eqslantgtr: '⪖',\n  eqslantless: '⪕',\n  equals: '=',\n  equest: '≟',\n  equiv: '≡',\n  equivDD: '⩸',\n  eqvparsl: '⧥',\n  erDot: '≓',\n  erarr: '⥱',\n  escr: 'ℯ',\n  esdot: '≐',\n  esim: '≂',\n  eta: 'η',\n  eth: 'ð',\n  euml: 'ë',\n  euro: '€',\n  excl: '!',\n  exist: '∃',\n  expectation: 'ℰ',\n  exponentiale: 'ⅇ',\n  fallingdotseq: '≒',\n  fcy: 'ф',\n  female: '♀',\n  ffilig: 'ﬃ',\n  fflig: 'ﬀ',\n  ffllig: 'ﬄ',\n  ffr: '𝔣',\n  filig: 'ﬁ',\n  fjlig: 'fj',\n  flat: '♭',\n  fllig: 'ﬂ',\n  fltns: '▱',\n  fnof: 'ƒ',\n  fopf: '𝕗',\n  forall: '∀',\n  fork: '⋔',\n  forkv: '⫙',\n  fpartint: '⨍',\n  frac12: '½',\n  frac13: '⅓',\n  frac14: '¼',\n  frac15: '⅕',\n  frac16: '⅙',\n  frac18: '⅛',\n  frac23: '⅔',\n  frac25: '⅖',\n  frac34: '¾',\n  frac35: '⅗',\n  frac38: '⅜',\n  frac45: '⅘',\n  frac56: '⅚',\n  frac58: '⅝',\n  frac78: '⅞',\n  frasl: '⁄',\n  frown: '⌢',\n  fscr: '𝒻',\n  gE: '≧',\n  gEl: '⪌',\n  gacute: 'ǵ',\n  gamma: 'γ',\n  gammad: 'ϝ',\n  gap: '⪆',\n  gbreve: 'ğ',\n  gcirc: 'ĝ',\n  gcy: 'г',\n  gdot: 'ġ',\n  ge: '≥',\n  gel: '⋛',\n  geq: '≥',\n  geqq: '≧',\n  geqslant: '⩾',\n  ges: '⩾',\n  gescc: '⪩',\n  gesdot: '⪀',\n  gesdoto: '⪂',\n  gesdotol: '⪄',\n  gesl: '⋛︀',\n  gesles: '⪔',\n  gfr: '𝔤',\n  gg: '≫',\n  ggg: '⋙',\n  gimel: 'ℷ',\n  gjcy: 'ѓ',\n  gl: '≷',\n  glE: '⪒',\n  gla: '⪥',\n  glj: '⪤',\n  gnE: '≩',\n  gnap: '⪊',\n  gnapprox: '⪊',\n  gne: '⪈',\n  gneq: '⪈',\n  gneqq: '≩',\n  gnsim: '⋧',\n  gopf: '𝕘',\n  grave: '`',\n  gscr: 'ℊ',\n  gsim: '≳',\n  gsime: '⪎',\n  gsiml: '⪐',\n  gt: '>',\n  gtcc: '⪧',\n  gtcir: '⩺',\n  gtdot: '⋗',\n  gtlPar: '⦕',\n  gtquest: '⩼',\n  gtrapprox: '⪆',\n  gtrarr: '⥸',\n  gtrdot: '⋗',\n  gtreqless: '⋛',\n  gtreqqless: '⪌',\n  gtrless: '≷',\n  gtrsim: '≳',\n  gvertneqq: '≩︀',\n  gvnE: '≩︀',\n  hArr: '⇔',\n  hairsp: ' ',\n  half: '½',\n  hamilt: 'ℋ',\n  hardcy: 'ъ',\n  harr: '↔',\n  harrcir: '⥈',\n  harrw: '↭',\n  hbar: 'ℏ',\n  hcirc: 'ĥ',\n  hearts: '♥',\n  heartsuit: '♥',\n  hellip: '…',\n  hercon: '⊹',\n  hfr: '𝔥',\n  hksearow: '⤥',\n  hkswarow: '⤦',\n  hoarr: '⇿',\n  homtht: '∻',\n  hookleftarrow: '↩',\n  hookrightarrow: '↪',\n  hopf: '𝕙',\n  horbar: '―',\n  hscr: '𝒽',\n  hslash: 'ℏ',\n  hstrok: 'ħ',\n  hybull: '⁃',\n  hyphen: '‐',\n  iacute: 'í',\n  ic: '⁣',\n  icirc: 'î',\n  icy: 'и',\n  iecy: 'е',\n  iexcl: '¡',\n  iff: '⇔',\n  ifr: '𝔦',\n  igrave: 'ì',\n  ii: 'ⅈ',\n  iiiint: '⨌',\n  iiint: '∭',\n  iinfin: '⧜',\n  iiota: '℩',\n  ijlig: 'ĳ',\n  imacr: 'ī',\n  image: 'ℑ',\n  imagline: 'ℐ',\n  imagpart: 'ℑ',\n  imath: 'ı',\n  imof: '⊷',\n  imped: 'Ƶ',\n  in: '∈',\n  incare: '℅',\n  infin: '∞',\n  infintie: '⧝',\n  inodot: 'ı',\n  int: '∫',\n  intcal: '⊺',\n  integers: 'ℤ',\n  intercal: '⊺',\n  intlarhk: '⨗',\n  intprod: '⨼',\n  iocy: 'ё',\n  iogon: 'į',\n  iopf: '𝕚',\n  iota: 'ι',\n  iprod: '⨼',\n  iquest: '¿',\n  iscr: '𝒾',\n  isin: '∈',\n  isinE: '⋹',\n  isindot: '⋵',\n  isins: '⋴',\n  isinsv: '⋳',\n  isinv: '∈',\n  it: '⁢',\n  itilde: 'ĩ',\n  iukcy: 'і',\n  iuml: 'ï',\n  jcirc: 'ĵ',\n  jcy: 'й',\n  jfr: '𝔧',\n  jmath: 'ȷ',\n  jopf: '𝕛',\n  jscr: '𝒿',\n  jsercy: 'ј',\n  jukcy: 'є',\n  kappa: 'κ',\n  kappav: 'ϰ',\n  kcedil: 'ķ',\n  kcy: 'к',\n  kfr: '𝔨',\n  kgreen: 'ĸ',\n  khcy: 'х',\n  kjcy: 'ќ',\n  kopf: '𝕜',\n  kscr: '𝓀',\n  lAarr: '⇚',\n  lArr: '⇐',\n  lAtail: '⤛',\n  lBarr: '⤎',\n  lE: '≦',\n  lEg: '⪋',\n  lHar: '⥢',\n  lacute: 'ĺ',\n  laemptyv: '⦴',\n  lagran: 'ℒ',\n  lambda: 'λ',\n  lang: '⟨',\n  langd: '⦑',\n  langle: '⟨',\n  lap: '⪅',\n  laquo: '«',\n  larr: '←',\n  larrb: '⇤',\n  larrbfs: '⤟',\n  larrfs: '⤝',\n  larrhk: '↩',\n  larrlp: '↫',\n  larrpl: '⤹',\n  larrsim: '⥳',\n  larrtl: '↢',\n  lat: '⪫',\n  latail: '⤙',\n  late: '⪭',\n  lates: '⪭︀',\n  lbarr: '⤌',\n  lbbrk: '❲',\n  lbrace: '{',\n  lbrack: '[',\n  lbrke: '⦋',\n  lbrksld: '⦏',\n  lbrkslu: '⦍',\n  lcaron: 'ľ',\n  lcedil: 'ļ',\n  lceil: '⌈',\n  lcub: '{',\n  lcy: 'л',\n  ldca: '⤶',\n  ldquo: '“',\n  ldquor: '„',\n  ldrdhar: '⥧',\n  ldrushar: '⥋',\n  ldsh: '↲',\n  le: '≤',\n  leftarrow: '←',\n  leftarrowtail: '↢',\n  leftharpoondown: '↽',\n  leftharpoonup: '↼',\n  leftleftarrows: '⇇',\n  leftrightarrow: '↔',\n  leftrightarrows: '⇆',\n  leftrightharpoons: '⇋',\n  leftrightsquigarrow: '↭',\n  leftthreetimes: '⋋',\n  leg: '⋚',\n  leq: '≤',\n  leqq: '≦',\n  leqslant: '⩽',\n  les: '⩽',\n  lescc: '⪨',\n  lesdot: '⩿',\n  lesdoto: '⪁',\n  lesdotor: '⪃',\n  lesg: '⋚︀',\n  lesges: '⪓',\n  lessapprox: '⪅',\n  lessdot: '⋖',\n  lesseqgtr: '⋚',\n  lesseqqgtr: '⪋',\n  lessgtr: '≶',\n  lesssim: '≲',\n  lfisht: '⥼',\n  lfloor: '⌊',\n  lfr: '𝔩',\n  lg: '≶',\n  lgE: '⪑',\n  lhard: '↽',\n  lharu: '↼',\n  lharul: '⥪',\n  lhblk: '▄',\n  ljcy: 'љ',\n  ll: '≪',\n  llarr: '⇇',\n  llcorner: '⌞',\n  llhard: '⥫',\n  lltri: '◺',\n  lmidot: 'ŀ',\n  lmoust: '⎰',\n  lmoustache: '⎰',\n  lnE: '≨',\n  lnap: '⪉',\n  lnapprox: '⪉',\n  lne: '⪇',\n  lneq: '⪇',\n  lneqq: '≨',\n  lnsim: '⋦',\n  loang: '⟬',\n  loarr: '⇽',\n  lobrk: '⟦',\n  longleftarrow: '⟵',\n  longleftrightarrow: '⟷',\n  longmapsto: '⟼',\n  longrightarrow: '⟶',\n  looparrowleft: '↫',\n  looparrowright: '↬',\n  lopar: '⦅',\n  lopf: '𝕝',\n  loplus: '⨭',\n  lotimes: '⨴',\n  lowast: '∗',\n  lowbar: '_',\n  loz: '◊',\n  lozenge: '◊',\n  lozf: '⧫',\n  lpar: '(',\n  lparlt: '⦓',\n  lrarr: '⇆',\n  lrcorner: '⌟',\n  lrhar: '⇋',\n  lrhard: '⥭',\n  lrm: '‎',\n  lrtri: '⊿',\n  lsaquo: '‹',\n  lscr: '𝓁',\n  lsh: '↰',\n  lsim: '≲',\n  lsime: '⪍',\n  lsimg: '⪏',\n  lsqb: '[',\n  lsquo: '‘',\n  lsquor: '‚',\n  lstrok: 'ł',\n  lt: '<',\n  ltcc: '⪦',\n  ltcir: '⩹',\n  ltdot: '⋖',\n  lthree: '⋋',\n  ltimes: '⋉',\n  ltlarr: '⥶',\n  ltquest: '⩻',\n  ltrPar: '⦖',\n  ltri: '◃',\n  ltrie: '⊴',\n  ltrif: '◂',\n  lurdshar: '⥊',\n  luruhar: '⥦',\n  lvertneqq: '≨︀',\n  lvnE: '≨︀',\n  mDDot: '∺',\n  macr: '¯',\n  male: '♂',\n  malt: '✠',\n  maltese: '✠',\n  map: '↦',\n  mapsto: '↦',\n  mapstodown: '↧',\n  mapstoleft: '↤',\n  mapstoup: '↥',\n  marker: '▮',\n  mcomma: '⨩',\n  mcy: 'м',\n  mdash: '—',\n  measuredangle: '∡',\n  mfr: '𝔪',\n  mho: '℧',\n  micro: 'µ',\n  mid: '∣',\n  midast: '*',\n  midcir: '⫰',\n  middot: '·',\n  minus: '−',\n  minusb: '⊟',\n  minusd: '∸',\n  minusdu: '⨪',\n  mlcp: '⫛',\n  mldr: '…',\n  mnplus: '∓',\n  models: '⊧',\n  mopf: '𝕞',\n  mp: '∓',\n  mscr: '𝓂',\n  mstpos: '∾',\n  mu: 'μ',\n  multimap: '⊸',\n  mumap: '⊸',\n  nGg: '⋙̸',\n  nGt: '≫⃒',\n  nGtv: '≫̸',\n  nLeftarrow: '⇍',\n  nLeftrightarrow: '⇎',\n  nLl: '⋘̸',\n  nLt: '≪⃒',\n  nLtv: '≪̸',\n  nRightarrow: '⇏',\n  nVDash: '⊯',\n  nVdash: '⊮',\n  nabla: '∇',\n  nacute: 'ń',\n  nang: '∠⃒',\n  nap: '≉',\n  napE: '⩰̸',\n  napid: '≋̸',\n  napos: 'ŉ',\n  napprox: '≉',\n  natur: '♮',\n  natural: '♮',\n  naturals: 'ℕ',\n  nbsp: ' ',\n  nbump: '≎̸',\n  nbumpe: '≏̸',\n  ncap: '⩃',\n  ncaron: 'ň',\n  ncedil: 'ņ',\n  ncong: '≇',\n  ncongdot: '⩭̸',\n  ncup: '⩂',\n  ncy: 'н',\n  ndash: '–',\n  ne: '≠',\n  neArr: '⇗',\n  nearhk: '⤤',\n  nearr: '↗',\n  nearrow: '↗',\n  nedot: '≐̸',\n  nequiv: '≢',\n  nesear: '⤨',\n  nesim: '≂̸',\n  nexist: '∄',\n  nexists: '∄',\n  nfr: '𝔫',\n  ngE: '≧̸',\n  nge: '≱',\n  ngeq: '≱',\n  ngeqq: '≧̸',\n  ngeqslant: '⩾̸',\n  nges: '⩾̸',\n  ngsim: '≵',\n  ngt: '≯',\n  ngtr: '≯',\n  nhArr: '⇎',\n  nharr: '↮',\n  nhpar: '⫲',\n  ni: '∋',\n  nis: '⋼',\n  nisd: '⋺',\n  niv: '∋',\n  njcy: 'њ',\n  nlArr: '⇍',\n  nlE: '≦̸',\n  nlarr: '↚',\n  nldr: '‥',\n  nle: '≰',\n  nleftarrow: '↚',\n  nleftrightarrow: '↮',\n  nleq: '≰',\n  nleqq: '≦̸',\n  nleqslant: '⩽̸',\n  nles: '⩽̸',\n  nless: '≮',\n  nlsim: '≴',\n  nlt: '≮',\n  nltri: '⋪',\n  nltrie: '⋬',\n  nmid: '∤',\n  nopf: '𝕟',\n  not: '¬',\n  notin: '∉',\n  notinE: '⋹̸',\n  notindot: '⋵̸',\n  notinva: '∉',\n  notinvb: '⋷',\n  notinvc: '⋶',\n  notni: '∌',\n  notniva: '∌',\n  notnivb: '⋾',\n  notnivc: '⋽',\n  npar: '∦',\n  nparallel: '∦',\n  nparsl: '⫽⃥',\n  npart: '∂̸',\n  npolint: '⨔',\n  npr: '⊀',\n  nprcue: '⋠',\n  npre: '⪯̸',\n  nprec: '⊀',\n  npreceq: '⪯̸',\n  nrArr: '⇏',\n  nrarr: '↛',\n  nrarrc: '⤳̸',\n  nrarrw: '↝̸',\n  nrightarrow: '↛',\n  nrtri: '⋫',\n  nrtrie: '⋭',\n  nsc: '⊁',\n  nsccue: '⋡',\n  nsce: '⪰̸',\n  nscr: '𝓃',\n  nshortmid: '∤',\n  nshortparallel: '∦',\n  nsim: '≁',\n  nsime: '≄',\n  nsimeq: '≄',\n  nsmid: '∤',\n  nspar: '∦',\n  nsqsube: '⋢',\n  nsqsupe: '⋣',\n  nsub: '⊄',\n  nsubE: '⫅̸',\n  nsube: '⊈',\n  nsubset: '⊂⃒',\n  nsubseteq: '⊈',\n  nsubseteqq: '⫅̸',\n  nsucc: '⊁',\n  nsucceq: '⪰̸',\n  nsup: '⊅',\n  nsupE: '⫆̸',\n  nsupe: '⊉',\n  nsupset: '⊃⃒',\n  nsupseteq: '⊉',\n  nsupseteqq: '⫆̸',\n  ntgl: '≹',\n  ntilde: 'ñ',\n  ntlg: '≸',\n  ntriangleleft: '⋪',\n  ntrianglelefteq: '⋬',\n  ntriangleright: '⋫',\n  ntrianglerighteq: '⋭',\n  nu: 'ν',\n  num: '#',\n  numero: '№',\n  numsp: ' ',\n  nvDash: '⊭',\n  nvHarr: '⤄',\n  nvap: '≍⃒',\n  nvdash: '⊬',\n  nvge: '≥⃒',\n  nvgt: '>⃒',\n  nvinfin: '⧞',\n  nvlArr: '⤂',\n  nvle: '≤⃒',\n  nvlt: '<⃒',\n  nvltrie: '⊴⃒',\n  nvrArr: '⤃',\n  nvrtrie: '⊵⃒',\n  nvsim: '∼⃒',\n  nwArr: '⇖',\n  nwarhk: '⤣',\n  nwarr: '↖',\n  nwarrow: '↖',\n  nwnear: '⤧',\n  oS: 'Ⓢ',\n  oacute: 'ó',\n  oast: '⊛',\n  ocir: '⊚',\n  ocirc: 'ô',\n  ocy: 'о',\n  odash: '⊝',\n  odblac: 'ő',\n  odiv: '⨸',\n  odot: '⊙',\n  odsold: '⦼',\n  oelig: 'œ',\n  ofcir: '⦿',\n  ofr: '𝔬',\n  ogon: '˛',\n  ograve: 'ò',\n  ogt: '⧁',\n  ohbar: '⦵',\n  ohm: 'Ω',\n  oint: '∮',\n  olarr: '↺',\n  olcir: '⦾',\n  olcross: '⦻',\n  oline: '‾',\n  olt: '⧀',\n  omacr: 'ō',\n  omega: 'ω',\n  omicron: 'ο',\n  omid: '⦶',\n  ominus: '⊖',\n  oopf: '𝕠',\n  opar: '⦷',\n  operp: '⦹',\n  oplus: '⊕',\n  or: '∨',\n  orarr: '↻',\n  ord: '⩝',\n  order: 'ℴ',\n  orderof: 'ℴ',\n  ordf: 'ª',\n  ordm: 'º',\n  origof: '⊶',\n  oror: '⩖',\n  orslope: '⩗',\n  orv: '⩛',\n  oscr: 'ℴ',\n  oslash: 'ø',\n  osol: '⊘',\n  otilde: 'õ',\n  otimes: '⊗',\n  otimesas: '⨶',\n  ouml: 'ö',\n  ovbar: '⌽',\n  par: '∥',\n  para: '¶',\n  parallel: '∥',\n  parsim: '⫳',\n  parsl: '⫽',\n  part: '∂',\n  pcy: 'п',\n  percnt: '%',\n  period: '.',\n  permil: '‰',\n  perp: '⊥',\n  pertenk: '‱',\n  pfr: '𝔭',\n  phi: 'φ',\n  phiv: 'ϕ',\n  phmmat: 'ℳ',\n  phone: '☎',\n  pi: 'π',\n  pitchfork: '⋔',\n  piv: 'ϖ',\n  planck: 'ℏ',\n  planckh: 'ℎ',\n  plankv: 'ℏ',\n  plus: '+',\n  plusacir: '⨣',\n  plusb: '⊞',\n  pluscir: '⨢',\n  plusdo: '∔',\n  plusdu: '⨥',\n  pluse: '⩲',\n  plusmn: '±',\n  plussim: '⨦',\n  plustwo: '⨧',\n  pm: '±',\n  pointint: '⨕',\n  popf: '𝕡',\n  pound: '£',\n  pr: '≺',\n  prE: '⪳',\n  prap: '⪷',\n  prcue: '≼',\n  pre: '⪯',\n  prec: '≺',\n  precapprox: '⪷',\n  preccurlyeq: '≼',\n  preceq: '⪯',\n  precnapprox: '⪹',\n  precneqq: '⪵',\n  precnsim: '⋨',\n  precsim: '≾',\n  prime: '′',\n  primes: 'ℙ',\n  prnE: '⪵',\n  prnap: '⪹',\n  prnsim: '⋨',\n  prod: '∏',\n  profalar: '⌮',\n  profline: '⌒',\n  profsurf: '⌓',\n  prop: '∝',\n  propto: '∝',\n  prsim: '≾',\n  prurel: '⊰',\n  pscr: '𝓅',\n  psi: 'ψ',\n  puncsp: ' ',\n  qfr: '𝔮',\n  qint: '⨌',\n  qopf: '𝕢',\n  qprime: '⁗',\n  qscr: '𝓆',\n  quaternions: 'ℍ',\n  quatint: '⨖',\n  quest: '?',\n  questeq: '≟',\n  quot: '\"',\n  rAarr: '⇛',\n  rArr: '⇒',\n  rAtail: '⤜',\n  rBarr: '⤏',\n  rHar: '⥤',\n  race: '∽̱',\n  racute: 'ŕ',\n  radic: '√',\n  raemptyv: '⦳',\n  rang: '⟩',\n  rangd: '⦒',\n  range: '⦥',\n  rangle: '⟩',\n  raquo: '»',\n  rarr: '→',\n  rarrap: '⥵',\n  rarrb: '⇥',\n  rarrbfs: '⤠',\n  rarrc: '⤳',\n  rarrfs: '⤞',\n  rarrhk: '↪',\n  rarrlp: '↬',\n  rarrpl: '⥅',\n  rarrsim: '⥴',\n  rarrtl: '↣',\n  rarrw: '↝',\n  ratail: '⤚',\n  ratio: '∶',\n  rationals: 'ℚ',\n  rbarr: '⤍',\n  rbbrk: '❳',\n  rbrace: '}',\n  rbrack: ']',\n  rbrke: '⦌',\n  rbrksld: '⦎',\n  rbrkslu: '⦐',\n  rcaron: 'ř',\n  rcedil: 'ŗ',\n  rceil: '⌉',\n  rcub: '}',\n  rcy: 'р',\n  rdca: '⤷',\n  rdldhar: '⥩',\n  rdquo: '”',\n  rdquor: '”',\n  rdsh: '↳',\n  real: 'ℜ',\n  realine: 'ℛ',\n  realpart: 'ℜ',\n  reals: 'ℝ',\n  rect: '▭',\n  reg: '®',\n  rfisht: '⥽',\n  rfloor: '⌋',\n  rfr: '𝔯',\n  rhard: '⇁',\n  rharu: '⇀',\n  rharul: '⥬',\n  rho: 'ρ',\n  rhov: 'ϱ',\n  rightarrow: '→',\n  rightarrowtail: '↣',\n  rightharpoondown: '⇁',\n  rightharpoonup: '⇀',\n  rightleftarrows: '⇄',\n  rightleftharpoons: '⇌',\n  rightrightarrows: '⇉',\n  rightsquigarrow: '↝',\n  rightthreetimes: '⋌',\n  ring: '˚',\n  risingdotseq: '≓',\n  rlarr: '⇄',\n  rlhar: '⇌',\n  rlm: '‏',\n  rmoust: '⎱',\n  rmoustache: '⎱',\n  rnmid: '⫮',\n  roang: '⟭',\n  roarr: '⇾',\n  robrk: '⟧',\n  ropar: '⦆',\n  ropf: '𝕣',\n  roplus: '⨮',\n  rotimes: '⨵',\n  rpar: ')',\n  rpargt: '⦔',\n  rppolint: '⨒',\n  rrarr: '⇉',\n  rsaquo: '›',\n  rscr: '𝓇',\n  rsh: '↱',\n  rsqb: ']',\n  rsquo: '’',\n  rsquor: '’',\n  rthree: '⋌',\n  rtimes: '⋊',\n  rtri: '▹',\n  rtrie: '⊵',\n  rtrif: '▸',\n  rtriltri: '⧎',\n  ruluhar: '⥨',\n  rx: '℞',\n  sacute: 'ś',\n  sbquo: '‚',\n  sc: '≻',\n  scE: '⪴',\n  scap: '⪸',\n  scaron: 'š',\n  sccue: '≽',\n  sce: '⪰',\n  scedil: 'ş',\n  scirc: 'ŝ',\n  scnE: '⪶',\n  scnap: '⪺',\n  scnsim: '⋩',\n  scpolint: '⨓',\n  scsim: '≿',\n  scy: 'с',\n  sdot: '⋅',\n  sdotb: '⊡',\n  sdote: '⩦',\n  seArr: '⇘',\n  searhk: '⤥',\n  searr: '↘',\n  searrow: '↘',\n  sect: '§',\n  semi: ';',\n  seswar: '⤩',\n  setminus: '∖',\n  setmn: '∖',\n  sext: '✶',\n  sfr: '𝔰',\n  sfrown: '⌢',\n  sharp: '♯',\n  shchcy: 'щ',\n  shcy: 'ш',\n  shortmid: '∣',\n  shortparallel: '∥',\n  shy: '­',\n  sigma: 'σ',\n  sigmaf: 'ς',\n  sigmav: 'ς',\n  sim: '∼',\n  simdot: '⩪',\n  sime: '≃',\n  simeq: '≃',\n  simg: '⪞',\n  simgE: '⪠',\n  siml: '⪝',\n  simlE: '⪟',\n  simne: '≆',\n  simplus: '⨤',\n  simrarr: '⥲',\n  slarr: '←',\n  smallsetminus: '∖',\n  smashp: '⨳',\n  smeparsl: '⧤',\n  smid: '∣',\n  smile: '⌣',\n  smt: '⪪',\n  smte: '⪬',\n  smtes: '⪬︀',\n  softcy: 'ь',\n  sol: '/',\n  solb: '⧄',\n  solbar: '⌿',\n  sopf: '𝕤',\n  spades: '♠',\n  spadesuit: '♠',\n  spar: '∥',\n  sqcap: '⊓',\n  sqcaps: '⊓︀',\n  sqcup: '⊔',\n  sqcups: '⊔︀',\n  sqsub: '⊏',\n  sqsube: '⊑',\n  sqsubset: '⊏',\n  sqsubseteq: '⊑',\n  sqsup: '⊐',\n  sqsupe: '⊒',\n  sqsupset: '⊐',\n  sqsupseteq: '⊒',\n  squ: '□',\n  square: '□',\n  squarf: '▪',\n  squf: '▪',\n  srarr: '→',\n  sscr: '𝓈',\n  ssetmn: '∖',\n  ssmile: '⌣',\n  sstarf: '⋆',\n  star: '☆',\n  starf: '★',\n  straightepsilon: 'ϵ',\n  straightphi: 'ϕ',\n  strns: '¯',\n  sub: '⊂',\n  subE: '⫅',\n  subdot: '⪽',\n  sube: '⊆',\n  subedot: '⫃',\n  submult: '⫁',\n  subnE: '⫋',\n  subne: '⊊',\n  subplus: '⪿',\n  subrarr: '⥹',\n  subset: '⊂',\n  subseteq: '⊆',\n  subseteqq: '⫅',\n  subsetneq: '⊊',\n  subsetneqq: '⫋',\n  subsim: '⫇',\n  subsub: '⫕',\n  subsup: '⫓',\n  succ: '≻',\n  succapprox: '⪸',\n  succcurlyeq: '≽',\n  succeq: '⪰',\n  succnapprox: '⪺',\n  succneqq: '⪶',\n  succnsim: '⋩',\n  succsim: '≿',\n  sum: '∑',\n  sung: '♪',\n  sup1: '¹',\n  sup2: '²',\n  sup3: '³',\n  sup: '⊃',\n  supE: '⫆',\n  supdot: '⪾',\n  supdsub: '⫘',\n  supe: '⊇',\n  supedot: '⫄',\n  suphsol: '⟉',\n  suphsub: '⫗',\n  suplarr: '⥻',\n  supmult: '⫂',\n  supnE: '⫌',\n  supne: '⊋',\n  supplus: '⫀',\n  supset: '⊃',\n  supseteq: '⊇',\n  supseteqq: '⫆',\n  supsetneq: '⊋',\n  supsetneqq: '⫌',\n  supsim: '⫈',\n  supsub: '⫔',\n  supsup: '⫖',\n  swArr: '⇙',\n  swarhk: '⤦',\n  swarr: '↙',\n  swarrow: '↙',\n  swnwar: '⤪',\n  szlig: 'ß',\n  target: '⌖',\n  tau: 'τ',\n  tbrk: '⎴',\n  tcaron: 'ť',\n  tcedil: 'ţ',\n  tcy: 'т',\n  tdot: '⃛',\n  telrec: '⌕',\n  tfr: '𝔱',\n  there4: '∴',\n  therefore: '∴',\n  theta: 'θ',\n  thetasym: 'ϑ',\n  thetav: 'ϑ',\n  thickapprox: '≈',\n  thicksim: '∼',\n  thinsp: ' ',\n  thkap: '≈',\n  thksim: '∼',\n  thorn: 'þ',\n  tilde: '˜',\n  times: '×',\n  timesb: '⊠',\n  timesbar: '⨱',\n  timesd: '⨰',\n  tint: '∭',\n  toea: '⤨',\n  top: '⊤',\n  topbot: '⌶',\n  topcir: '⫱',\n  topf: '𝕥',\n  topfork: '⫚',\n  tosa: '⤩',\n  tprime: '‴',\n  trade: '™',\n  triangle: '▵',\n  triangledown: '▿',\n  triangleleft: '◃',\n  trianglelefteq: '⊴',\n  triangleq: '≜',\n  triangleright: '▹',\n  trianglerighteq: '⊵',\n  tridot: '◬',\n  trie: '≜',\n  triminus: '⨺',\n  triplus: '⨹',\n  trisb: '⧍',\n  tritime: '⨻',\n  trpezium: '⏢',\n  tscr: '𝓉',\n  tscy: 'ц',\n  tshcy: 'ћ',\n  tstrok: 'ŧ',\n  twixt: '≬',\n  twoheadleftarrow: '↞',\n  twoheadrightarrow: '↠',\n  uArr: '⇑',\n  uHar: '⥣',\n  uacute: 'ú',\n  uarr: '↑',\n  ubrcy: 'ў',\n  ubreve: 'ŭ',\n  ucirc: 'û',\n  ucy: 'у',\n  udarr: '⇅',\n  udblac: 'ű',\n  udhar: '⥮',\n  ufisht: '⥾',\n  ufr: '𝔲',\n  ugrave: 'ù',\n  uharl: '↿',\n  uharr: '↾',\n  uhblk: '▀',\n  ulcorn: '⌜',\n  ulcorner: '⌜',\n  ulcrop: '⌏',\n  ultri: '◸',\n  umacr: 'ū',\n  uml: '¨',\n  uogon: 'ų',\n  uopf: '𝕦',\n  uparrow: '↑',\n  updownarrow: '↕',\n  upharpoonleft: '↿',\n  upharpoonright: '↾',\n  uplus: '⊎',\n  upsi: 'υ',\n  upsih: 'ϒ',\n  upsilon: 'υ',\n  upuparrows: '⇈',\n  urcorn: '⌝',\n  urcorner: '⌝',\n  urcrop: '⌎',\n  uring: 'ů',\n  urtri: '◹',\n  uscr: '𝓊',\n  utdot: '⋰',\n  utilde: 'ũ',\n  utri: '▵',\n  utrif: '▴',\n  uuarr: '⇈',\n  uuml: 'ü',\n  uwangle: '⦧',\n  vArr: '⇕',\n  vBar: '⫨',\n  vBarv: '⫩',\n  vDash: '⊨',\n  vangrt: '⦜',\n  varepsilon: 'ϵ',\n  varkappa: 'ϰ',\n  varnothing: '∅',\n  varphi: 'ϕ',\n  varpi: 'ϖ',\n  varpropto: '∝',\n  varr: '↕',\n  varrho: 'ϱ',\n  varsigma: 'ς',\n  varsubsetneq: '⊊︀',\n  varsubsetneqq: '⫋︀',\n  varsupsetneq: '⊋︀',\n  varsupsetneqq: '⫌︀',\n  vartheta: 'ϑ',\n  vartriangleleft: '⊲',\n  vartriangleright: '⊳',\n  vcy: 'в',\n  vdash: '⊢',\n  vee: '∨',\n  veebar: '⊻',\n  veeeq: '≚',\n  vellip: '⋮',\n  verbar: '|',\n  vert: '|',\n  vfr: '𝔳',\n  vltri: '⊲',\n  vnsub: '⊂⃒',\n  vnsup: '⊃⃒',\n  vopf: '𝕧',\n  vprop: '∝',\n  vrtri: '⊳',\n  vscr: '𝓋',\n  vsubnE: '⫋︀',\n  vsubne: '⊊︀',\n  vsupnE: '⫌︀',\n  vsupne: '⊋︀',\n  vzigzag: '⦚',\n  wcirc: 'ŵ',\n  wedbar: '⩟',\n  wedge: '∧',\n  wedgeq: '≙',\n  weierp: '℘',\n  wfr: '𝔴',\n  wopf: '𝕨',\n  wp: '℘',\n  wr: '≀',\n  wreath: '≀',\n  wscr: '𝓌',\n  xcap: '⋂',\n  xcirc: '◯',\n  xcup: '⋃',\n  xdtri: '▽',\n  xfr: '𝔵',\n  xhArr: '⟺',\n  xharr: '⟷',\n  xi: 'ξ',\n  xlArr: '⟸',\n  xlarr: '⟵',\n  xmap: '⟼',\n  xnis: '⋻',\n  xodot: '⨀',\n  xopf: '𝕩',\n  xoplus: '⨁',\n  xotime: '⨂',\n  xrArr: '⟹',\n  xrarr: '⟶',\n  xscr: '𝓍',\n  xsqcup: '⨆',\n  xuplus: '⨄',\n  xutri: '△',\n  xvee: '⋁',\n  xwedge: '⋀',\n  yacute: 'ý',\n  yacy: 'я',\n  ycirc: 'ŷ',\n  ycy: 'ы',\n  yen: '¥',\n  yfr: '𝔶',\n  yicy: 'ї',\n  yopf: '𝕪',\n  yscr: '𝓎',\n  yucy: 'ю',\n  yuml: 'ÿ',\n  zacute: 'ź',\n  zcaron: 'ž',\n  zcy: 'з',\n  zdot: 'ż',\n  zeetrf: 'ℨ',\n  zeta: 'ζ',\n  zfr: '𝔷',\n  zhcy: 'ж',\n  zigrarr: '⇝',\n  zopf: '𝕫',\n  zscr: '𝓏',\n  zwj: '‍',\n  zwnj: '‌'\n};","import { characterEntities } from 'character-entities';\nconst own = {}.hasOwnProperty;\n\n/**\n * Decode a single character reference (without the `&` or `;`).\n * You probably only need this when you’re building parsers yourself that follow\n * different rules compared to HTML.\n * This is optimized to be tiny in browsers.\n *\n * @param {string} value\n *   `notin` (named), `#123` (deci), `#x123` (hexa).\n * @returns {string|false}\n *   Decoded reference.\n */\nexport function decodeNamedCharacterReference(value) {\n  return own.call(characterEntities, value) ? characterEntities[value] : false;\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference');\n    effects.enter('characterReferenceMarker');\n    effects.consume(code);\n    effects.exit('characterReferenceMarker');\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric');\n      effects.consume(code);\n      effects.exit('characterReferenceMarkerNumeric');\n      return numeric;\n    }\n    effects.enter('characterReferenceValue');\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal');\n      effects.consume(code);\n      effects.exit('characterReferenceMarkerHexadecimal');\n      effects.enter('characterReferenceValue');\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter('characterReferenceValue');\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue');\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker');\n      effects.consume(code);\n      effects.exit('characterReferenceMarker');\n      effects.exit('characterReference');\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape');\n    effects.enter('escapeMarker');\n    effects.consume(code);\n    effects.exit('escapeMarker');\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue');\n      effects.consume(code);\n      effects.exit('characterEscapeValue');\n      effects.exit('characterEscape');\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return factorySpace(effects, ok, 'linePrefix');\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  while (++index < events.length) {\n    const token = events[index][1];\n    if (token.type === 'labelImage' || token.type === 'labelLink' || token.type === 'labelEnd') {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2);\n      token.type = 'data';\n      index++;\n    }\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === 'link' || token.type === 'labelLink' && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === 'labelImage' || token.type === 'labelLink') && !token._balanced) {\n        open = index;\n        if (token.type !== 'labelLink') {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  };\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === 'labelImage' || self.events[index][1].type === 'labelLink') && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter('labelEnd');\n    effects.enter('labelMarker');\n    effects.consume(code);\n    effects.exit('labelMarker');\n    effects.exit('labelEnd');\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource');\n    effects.enter('resourceMarker');\n    effects.consume(code);\n    effects.exit('resourceMarker');\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, 'resourceDestination', 'resourceDestinationLiteral', 'resourceDestinationLiteralMarker', 'resourceDestinationRaw', 'resourceDestinationString', 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, 'resourceTitle', 'resourceTitleMarker', 'resourceTitleString')(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker');\n      effects.consume(code);\n      effects.exit('resourceMarker');\n      effects.exit('resource');\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, 'reference', 'referenceMarker', 'referenceString')(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference');\n    effects.enter('referenceMarker');\n    effects.consume(code);\n    effects.exit('referenceMarker');\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker');\n      effects.consume(code);\n      effects.exit('referenceMarker');\n      effects.exit('reference');\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return 1;\n  }\n  if (unicodePunctuation(code)) {\n    return 2;\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = Object.assign({}, events[open][1].end);\n          const end = Object.assign({}, events[index][1].start);\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          };\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          };\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          };\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          };\n          events[open][1].end = Object.assign({}, openingSequence.start);\n          events[index][1].start = Object.assign({}, closingSequence.end);\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport { attention, autolink, blockQuote, characterEscape, characterReference, codeFenced, codeIndented, codeText, definition, hardBreakEscape, headingAtx, htmlFlow, htmlText, labelEnd, labelStartImage, labelStartLink, lineEnding, list, setextUnderline, thematicBreak } from 'micromark-core-commonmark';\nimport { resolver as resolveText } from './initialize/text.js';\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n};\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n};\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n};\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n};\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n};\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n};\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n};\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n};\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n};","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === 'whitespace') {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === 'atxHeadingSequence' && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === 'whitespace')) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading');\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence');\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence');\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence');\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading');\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText');\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit('atxHeadingSequence');\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText');\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage');\n    effects.enter('labelImageMarker');\n    effects.consume(code);\n    effects.exit('labelImageMarker');\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker');\n      effects.consume(code);\n      effects.exit('labelMarker');\n      effects.exit('labelImage');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink');\n    effects.enter('autolinkMarker');\n    effects.consume(code);\n    effects.exit('autolinkMarker');\n    effects.enter('autolinkProtocol');\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol');\n      effects.enter('autolinkMarker');\n      effects.consume(code);\n      effects.exit('autolinkMarker');\n      effects.exit('autolink');\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail';\n      effects.enter('autolinkMarker');\n      effects.consume(code);\n      effects.exit('autolinkMarker');\n      effects.exit('autolink');\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText');\n    effects.enter('htmlTextData');\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA[';\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit('htmlTextData');\n      effects.exit('htmlText');\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData');\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, 'linePrefix', self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData');\n    return returnState(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink');\n    effects.enter('labelMarker');\n    effects.consume(code);\n    effects.exit('labelMarker');\n    effects.exit('labelLink');\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape');\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape');\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === 'lineEnding' || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === 'lineEnding' || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding';\n        events[tailExitIndex][1].type = 'codeTextPadding';\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === 'lineEnding') {\n      events[enter][1].type = 'codeTextData';\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === 'characterEscape';\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText');\n    effects.enter('codeTextSequence');\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit('codeTextSequence');\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence');\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return between;\n    }\n\n    // Data.\n    effects.enter('codeTextData');\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit('codeTextData');\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence');\n      effects.exit('codeText');\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData';\n    return data(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport { combineExtensions } from 'micromark-util-combine-extensions';\nimport { content } from './initialize/content.js';\nimport { document } from './initialize/document.js';\nimport { flow } from './initialize/flow.js';\nimport { text, string } from './initialize/text.js';\nimport { createTokenizer } from './create-tokenizer.js';\nimport * as defaultConstructs from './constructs.js';\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {};\n  const constructs = /** @type {FullNormalizedExtension} */\n  combineExtensions([defaultConstructs, ...(settings.extensions || [])]);\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  };\n  return parser;\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator;\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from);\n    }\n  }\n}","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g;\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1;\n  let buffer = '';\n  /** @type {boolean | undefined} */\n  let start = true;\n  /** @type {boolean | undefined} */\n  let atCarriageReturn;\n  return preprocessor;\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = [];\n    /** @type {RegExpMatchArray | null} */\n    let match;\n    /** @type {number} */\n    let next;\n    /** @type {number} */\n    let startPosition;\n    /** @type {number} */\n    let endPosition;\n    /** @type {Code} */\n    let code;\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding);\n    startPosition = 0;\n    buffer = '';\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++;\n      }\n      start = undefined;\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition;\n      match = search.exec(value);\n      endPosition = match && match.index !== undefined ? match.index : value.length;\n      code = value.charCodeAt(endPosition);\n      if (!match) {\n        buffer = value.slice(startPosition);\n        break;\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3);\n        atCarriageReturn = undefined;\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5);\n          atCarriageReturn = undefined;\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition));\n          column += endPosition - startPosition;\n        }\n        switch (code) {\n          case 0:\n            {\n              chunks.push(65533);\n              column++;\n              break;\n            }\n          case 9:\n            {\n              next = Math.ceil(column / 4) * 4;\n              chunks.push(-2);\n              while (column++ < next) chunks.push(-1);\n              break;\n            }\n          case 10:\n            {\n              chunks.push(-4);\n              column = 1;\n              break;\n            }\n          default:\n            {\n              atCarriageReturn = true;\n              column = 1;\n            }\n        }\n      }\n      startPosition = endPosition + 1;\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5);\n      if (buffer) chunks.push(buffer);\n      chunks.push(null);\n    }\n    return chunks;\n  }\n}","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55295 && code < 57344 ||\n  // Noncharacters.\n  code > 64975 && code < 65008 /* eslint-disable no-bitwise */ || (code & 65535) === 65535 || (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n  // Out of range\n  code > 1114111) {\n    return '\\uFFFD';\n  }\n  return String.fromCharCode(code);\n}","import { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nconst characterEscapeOrReference = /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi;\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode);\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1;\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0);\n  if (head === 35) {\n    const head = $2.charCodeAt(1);\n    const hex = head === 120 || head === 88;\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);\n  }\n  return decodeNamedCharacterReference($2) || $0;\n}","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse } from 'micromark/lib/parse.js';\nimport { preprocess } from 'micromark/lib/preprocess.js';\nimport { postprocess } from 'micromark/lib/postprocess.js';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n/**\n * @type {(\n *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n *   ((value: Value, options?: Options | null | undefined) => Root)\n * )}\n */\n\n/**\n * @param {Value} value\n * @param {Encoding | Options | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n */\nfunction (value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n};\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  const data = {};\n  return compile;\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    };\n    /** @type {Array<number>} */\n    const listStack = [];\n    let index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === 'listOrdered' || events[index][1].type === 'listUnordered') {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n    let listItem;\n    /** @type {number | undefined} */\n    let lineIndex;\n    /** @type {number | undefined} */\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index <= length) {\n      const event = events[index];\n      if (event[1].type === 'listUnordered' || event[1].type === 'listOrdered' || event[1].type === 'blockQuote') {\n        if (event[0] === 'enter') {\n          containerBalance++;\n        } else {\n          containerBalance--;\n        }\n        atMarker = undefined;\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n            firstBlankLineIndex = index;\n          }\n          atMarker = undefined;\n        }\n      } else if (event[1].type === 'linePrefix' || event[1].type === 'listItemValue' || event[1].type === 'listItemMarker' || event[1].type === 'listItemPrefix' || event[1].type === 'listItemPrefixWhitespace') {\n        // Empty.\n      } else {\n        atMarker = undefined;\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === 'listItemPrefix' || containerBalance === -1 && event[0] === 'exit' && (event[1].type === 'listUnordered' || event[1].type === 'listOrdered')) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === 'lineEnding' || tailEvent[1].type === 'lineEndingBlank') {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank';\n                listSpread = true;\n              }\n              tailEvent[1].type = 'lineEnding';\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === 'linePrefix' || tailEvent[1].type === 'blockQuotePrefix' || tailEvent[1].type === 'blockQuotePrefixWhitespace' || tailEvent[1].type === 'blockQuoteMarker' || tailEvent[1].type === 'listItemIndent') {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value;\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key];\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler]);\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    };\n    return node;\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n    return node;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      setData('expectingFirstListItemValue');\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return;\n    this.buffer();\n    setData('flowCodeInside', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    setData('flowCodeInside');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    let tail = node.children[node.children.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      };\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      setData('atHardBreak');\n      return;\n    }\n    if (!getData('setextHeadingSlurpLineEnding') && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    setData('referenceType');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    setData('referenceType');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    setData('inReference', true);\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    setData('referenceType', 'full');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = getData('characterReferenceType');\n    /** @type {string} */\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === 'characterReferenceMarkerNumeric' ? 10 : 16);\n      setData('characterReferenceType');\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    const tail = this.stack.pop();\n    tail.value += value;\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1;\n  while (++index < extensions.length) {\n    const value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key];\n        if (right) {\n          combined[key].push(...right);\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key];\n        if (right) {\n          combined[key].push(...right);\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key];\n        if (right) {\n          Object.assign(combined[key], right);\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport { subtokenize } from 'micromark-util-subtokenize';\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events;\n}","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport { fromMarkdown } from 'mdast-util-from-markdown';\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?] | void[], string, Root>}\n */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = doc => {\n    // Assume options.\n    const settings = /** @type {Options} */this.data('settings');\n    return fromMarkdown(doc, Object.assign({}, settings, options, {\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: this.data('micromarkExtensions') || [],\n      mdastExtensions: this.data('fromMarkdownExtensions') || []\n    }));\n  };\n  Object.assign(this, {\n    Parser: parser\n  });\n}","/**\n * @typedef {import('unist').Node} Node\n */\n\n/**\n * @typedef {Array<Node> | string} ChildrenOrValue\n *   List to use as `children` or value to use as `value`.\n *\n * @typedef {Record<string, unknown>} Props\n *   Other fields to add to the node.\n */\n\n/**\n * Build a node.\n *\n * @param type\n *   Node type.\n * @param props\n *   Fields assigned to node.\n * @param value\n *   Children of node or value of `node` (cast to string).\n * @returns\n *   Built node.\n */\nexport const u =\n/**\n * @type {(\n *   (<T extends string>(type: T) => {type: T}) &\n *   (<T extends string, P extends Props>(type: T, props: P) => {type: T} & P) &\n *   (<T extends string>(type: T, value: string) => {type: T, value: string}) &\n *   (<T extends string, P extends Props>(type: T, props: P, value: string) => {type: T, value: string} & P) &\n *   (<T extends string, C extends Array<Node>>(type: T, children: C) => {type: T, children: C}) &\n *   (<T extends string, P extends Props, C extends Array<Node>>(type: T, props: P, children: C) => {type: T, children: C} & P)\n * )}\n */\n\n/**\n * @param {string} type\n * @param {Props | ChildrenOrValue | null | undefined} [props]\n * @param {ChildrenOrValue | null | undefined} [value]\n * @returns {Node}\n */\nfunction (type, props, value) {\n  /** @type {Node} */\n  const node = {\n    type: String(type)\n  };\n  if ((value === undefined || value === null) && (typeof props === 'string' || Array.isArray(props))) {\n    value = props;\n  } else {\n    Object.assign(node, props);\n  }\n  if (Array.isArray(value)) {\n    // @ts-expect-error: create a parent.\n    node.children = value;\n  } else if (value !== undefined && value !== null) {\n    // @ts-expect-error: create a literal.\n    node.value = String(value);\n  }\n  return node;\n};","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n/**\n * @type {(\n *   (() => false) &\n *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n * )}\n */\n\n/**\n * @param {unknown} [node]\n * @param {Test} [test]\n * @param {number | null | undefined} [index]\n * @param {Parent | null | undefined} [parent]\n * @param {unknown} [context]\n * @returns {boolean}\n */\n// eslint-disable-next-line max-params\nfunction is(node, test, index, parent, context) {\n  const check = convert(test);\n  if (index !== undefined && index !== null && (typeof index !== 'number' || index < 0 || index === Number.POSITIVE_INFINITY)) {\n    throw new Error('Expected positive finite index');\n  }\n  if (parent !== undefined && parent !== null && (!is(parent) || !parent.children)) {\n    throw new Error('Expected parent node');\n  }\n  if ((parent === undefined || parent === null) !== (index === undefined || index === null)) {\n    throw new Error('Expected both parent and index');\n  }\n\n  // @ts-expect-error Looks like a node.\n  return node && node.type && typeof node.type === 'string' ? Boolean(check.call(context, node, index, parent)) : false;\n};\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n/**\n * @type {(\n *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n *   ((test?: Test) => AssertAnything)\n * )}\n */\n\n/**\n * @param {Test} [test]\n * @returns {AssertAnything}\n */\nfunction (test) {\n  if (test === undefined || test === null) {\n    return ok;\n  }\n  if (typeof test === 'string') {\n    return typeFactory(test);\n  }\n  if (typeof test === 'object') {\n    return Array.isArray(test) ? anyFactory(test) : propsFactory(test);\n  }\n  if (typeof test === 'function') {\n    return castFactory(test);\n  }\n  throw new Error('Expected function, string, or object as test');\n};\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = [];\n  let index = -1;\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index]);\n  }\n  return castFactory(any);\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any() {\n    let index = -1;\n    for (var _len = arguments.length, parameters = new Array(_len), _key = 0; _key < _len; _key++) {\n      parameters[_key] = arguments[_key];\n    }\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true;\n    }\n    return false;\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all);\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key;\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false;\n    }\n    return true;\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type);\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check;\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion;\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node) {\n    for (var _len2 = arguments.length, parameters = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      parameters[_key2 - 1] = arguments[_key2];\n    }\n    return Boolean(node && typeof node === 'object' && 'type' in node &&\n    // @ts-expect-error: fine.\n    Boolean(check.call(this, node, ...parameters)));\n  }\n}\nfunction ok() {\n  return true;\n}","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport { convert } from 'unist-util-is';\nimport { color } from './color.js';\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true;\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false;\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip';\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n/**\n * @type {(\n *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n * )}\n */\n\n/**\n * @param {Node} tree\n * @param {Test} test\n * @param {Visitor<Node>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {void}\n */\nfunction (tree, test, visitor, reverse) {\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor;\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test;\n    test = null;\n  }\n  const is = convert(test);\n  const step = reverse ? -1 : 1;\n  factory(tree, undefined, [])();\n\n  /**\n   * @param {Node} node\n   * @param {number | undefined} index\n   * @param {Array<Parent>} parents\n   */\n  function factory(node, index, parents) {\n    /** @type {Record<string, unknown>} */\n    // @ts-expect-error: hush\n    const value = node && typeof node === 'object' ? node : {};\n    if (typeof value.type === 'string') {\n      const name =\n      // `hast`\n      typeof value.tagName === 'string' ? value.tagName :\n      // `xast`\n      typeof value.name === 'string' ? value.name : undefined;\n      Object.defineProperty(visit, 'name', {\n        value: 'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      });\n    }\n    return visit;\n    function visit() {\n      /** @type {ActionTuple} */\n      let result = [];\n      /** @type {ActionTuple} */\n      let subresult;\n      /** @type {number} */\n      let offset;\n      /** @type {Array<Parent>} */\n      let grandparents;\n      if (!test || is(node, index, parents[parents.length - 1] || null)) {\n        result = toResult(visitor(node, parents));\n        if (result[0] === EXIT) {\n          return result;\n        }\n      }\n\n      // @ts-expect-error looks like a parent.\n      if (node.children && result[0] !== SKIP) {\n        // @ts-expect-error looks like a parent.\n        offset = (reverse ? node.children.length : -1) + step;\n        // @ts-expect-error looks like a parent.\n        grandparents = parents.concat(node);\n\n        // @ts-expect-error looks like a parent.\n        while (offset > -1 && offset < node.children.length) {\n          // @ts-expect-error looks like a parent.\n          subresult = factory(node.children[offset], offset, grandparents)();\n          if (subresult[0] === EXIT) {\n            return subresult;\n          }\n          offset = typeof subresult[1] === 'number' ? subresult[1] : offset + step;\n        }\n      }\n      return result;\n    }\n  }\n};\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value;\n  }\n  if (typeof value === 'number') {\n    return [CONTINUE, value];\n  }\n  return [value];\n}","/**\n * @param {string} d\n * @returns {string}\n */\nexport function color(d) {\n  return d;\n}","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport { visitParents } from 'unist-util-visit-parents';\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n/**\n * @type {(\n *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n * )}\n */\n\n/**\n * @param {Node} tree\n * @param {Test} test\n * @param {Visitor} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {void}\n */\nfunction (tree, test, visitor, reverse) {\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor;\n    visitor = test;\n    test = null;\n  }\n  visitParents(tree, test, overload, reverse);\n\n  /**\n   * @param {Node} node\n   * @param {Array<Parent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1];\n    return visitor(node, parent ? parent.children.indexOf(node) : null, parent);\n  }\n};\nexport { CONTINUE, EXIT, SKIP } from 'unist-util-visit-parents';","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start');\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end');\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike | Node | null | undefined} [node]\n *   Node.\n * @returns {Position}\n *   Position.\n */\nexport function position(node) {\n  return {\n    start: pointStart(node),\n    end: pointEnd(node)\n  };\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start' | 'end'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point;\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {NodeLike | Node | null | undefined} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    const point = node && node.position && node.position[type] || {};\n\n    // To do: next major: don’t return points when invalid.\n    return {\n      // @ts-expect-error: in practice, null is allowed.\n      line: point.line || null,\n      // @ts-expect-error: in practice, null is allowed.\n      column: point.column || null,\n      // @ts-expect-error: in practice, null is allowed.\n      offset: point.offset > -1 ? point.offset : null\n    };\n  }\n}","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Definition} Definition\n */\n\n/**\n * @typedef {Root | Content} Node\n *\n * @callback GetDefinition\n *   Get a definition by identifier.\n * @param {string | null | undefined} [identifier]\n *   Identifier of definition.\n * @returns {Definition | null}\n *   Definition corresponding to `identifier` or `null`.\n */\n\nimport { visit } from 'unist-util-visit';\nconst own = {}.hasOwnProperty;\n\n/**\n * Find definitions in `tree`.\n *\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} tree\n *   Tree to check.\n * @returns {GetDefinition}\n *   Getter.\n */\nexport function definitions(tree) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null);\n  if (!tree || !tree.type) {\n    throw new Error('mdast-util-definitions expected node');\n  }\n  visit(tree, 'definition', definition => {\n    const id = clean(definition.identifier);\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition;\n    }\n  });\n  return definition;\n\n  /** @type {GetDefinition} */\n  function definition(identifier) {\n    const id = clean(identifier);\n    // To do: next major: return `undefined` when not found.\n    return id && own.call(cache, id) ? cache[id] : null;\n  }\n}\n\n/**\n * @param {string | null | undefined} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase();\n}","/**\n * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode\n * @typedef {import('./index.js').H} H\n * @typedef {import('./index.js').Handler} Handler\n * @typedef {import('./index.js').Content} Content\n */\n\nimport { u } from 'unist-builder';\nconst own = {}.hasOwnProperty;\n\n/**\n * Transform an unknown node.\n * @type {Handler}\n * @param {MdastNode} node\n */\nfunction unknown(h, node) {\n  const data = node.data || {};\n  if ('value' in node && !(own.call(data, 'hName') || own.call(data, 'hProperties') || own.call(data, 'hChildren'))) {\n    return h.augment(node, u('text', node.value));\n  }\n  return h(node, 'div', all(h, node));\n}\n\n/**\n * @type {Handler}\n * @param {MdastNode} node\n */\nexport function one(h, node, parent) {\n  const type = node && node.type;\n  /** @type {Handler} */\n  let fn;\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`');\n  }\n  if (own.call(h.handlers, type)) {\n    fn = h.handlers[type];\n  } else if (h.passThrough && h.passThrough.includes(type)) {\n    fn = returnNode;\n  } else {\n    fn = h.unknownHandler;\n  }\n  return (typeof fn === 'function' ? fn : unknown)(h, node, parent);\n}\n\n/**\n * @type {Handler}\n * @param {MdastNode} node\n */\nfunction returnNode(h, node) {\n  // @ts-expect-error: Pass through custom node.\n  return 'children' in node ? {\n    ...node,\n    children: all(h, node)\n  } : node;\n}\n\n/**\n * @param {H} h\n * @param {MdastNode} parent\n */\nexport function all(h, parent) {\n  /** @type {Array.<Content>} */\n  const values = [];\n  if ('children' in parent) {\n    const nodes = parent.children;\n    let index = -1;\n    while (++index < nodes.length) {\n      const result = one(h, nodes[index], parent);\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '');\n          }\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0];\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '');\n            }\n          }\n        }\n        if (Array.isArray(result)) {\n          values.push(...result);\n        } else {\n          values.push(result);\n        }\n      }\n    }\n  }\n  return values;\n}","/**\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').Handler} Handler\n */\n\n/**\n * @type {Handler}\n * @param {ThematicBreak} [node]\n * @returns {Element}\n */\nexport function thematicBreak(h, node) {\n  return h(node, 'hr');\n}","/**\n * @typedef {import('./index.js').Content} Content\n */\n\nimport { u } from 'unist-builder';\n\n/**\n * Wrap `nodes` with line feeds between each entry.\n * Optionally adds line feeds at the start and end.\n *\n * @param {Array.<Content>} nodes\n * @param {boolean} [loose=false]\n * @returns {Array.<Content>}\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array.<Content>} */\n  const result = [];\n  let index = -1;\n  if (loose) {\n    result.push(u('text', '\\n'));\n  }\n  while (++index < nodes.length) {\n    if (index) result.push(u('text', '\\n'));\n    result.push(nodes[index]);\n  }\n  if (loose && nodes.length > 0) {\n    result.push(u('text', '\\n'));\n  }\n  return result;\n}","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport { wrap } from '../wrap.js';\nimport { all } from '../traverse.js';\n\n/**\n * @type {Handler}\n * @param {List} node\n * @returns {Element}\n */\nexport function list(h, node) {\n  /** @type {Properties} */\n  const props = {};\n  const name = node.ordered ? 'ol' : 'ul';\n  const items = all(h, node);\n  let index = -1;\n  if (typeof node.start === 'number' && node.start !== 1) {\n    props.start = node.start;\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < items.length) {\n    const item = items[index];\n    if (item.type === 'element' && item.tagName === 'li' && item.properties && Array.isArray(item.properties.className) && item.properties.className.includes('task-list-item')) {\n      props.className = ['contains-task-list'];\n      break;\n    }\n  }\n  return h(node, name, props, wrap(items, true));\n}","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport { u } from 'unist-builder';\n\n/**\n * @type {Handler}\n * @param {FootnoteReference} node\n */\nexport function footnoteReference(h, node) {\n  const footnoteOrder = h.footnoteOrder;\n  const identifier = String(node.identifier);\n  const index = footnoteOrder.indexOf(identifier);\n  const marker = String(index === -1 ? footnoteOrder.push(identifier) : index + 1);\n  return h(node, 'a', {\n    href: '#fn' + marker,\n    className: ['footnote-ref'],\n    id: 'fnref' + marker,\n    role: 'doc-noteref'\n  }, [h(node.position, 'sup', [u('text', marker)])]);\n}","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('./index.js').Handler} Handler\n * @typedef {import('./index.js').Content} Content\n */\n\nimport { u } from 'unist-builder';\nimport { all } from './traverse.js';\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @type {Handler}\n * @param {ImageReference|LinkReference} node\n * @returns {Content|Array.<Content>}\n */\nexport function revert(h, node) {\n  const subtype = node.referenceType;\n  let suffix = ']';\n  if (subtype === 'collapsed') {\n    suffix += '[]';\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']';\n  }\n  if (node.type === 'imageReference') {\n    return u('text', '![' + node.alt + suffix);\n  }\n  const contents = all(h, node);\n  const head = contents[0];\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value;\n  } else {\n    contents.unshift(u('text', '['));\n  }\n  const tail = contents[contents.length - 1];\n  if (tail && tail.type === 'text') {\n    tail.value += suffix;\n  } else {\n    contents.push(u('text', suffix));\n  }\n  return contents;\n}","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').List} List\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').Handler} Handler\n * @typedef {import('../index.js').Content} Content\n */\n\nimport { u } from 'unist-builder';\nimport { all } from '../traverse.js';\n\n/**\n * @type {Handler}\n * @param {ListItem} node\n * @param {List} parent\n */\nexport function listItem(h, node, parent) {\n  const result = all(h, node);\n  const loose = parent ? listLoose(parent) : listItemLoose(node);\n  /** @type {Properties} */\n  const props = {};\n  /** @type {Array.<Content>} */\n  const wrapped = [];\n  if (typeof node.checked === 'boolean') {\n    /** @type {Element} */\n    let paragraph;\n    if (result[0] && result[0].type === 'element' && result[0].tagName === 'p') {\n      paragraph = result[0];\n    } else {\n      paragraph = h(null, 'p', []);\n      result.unshift(paragraph);\n    }\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift(u('text', ' '));\n    }\n    paragraph.children.unshift(h(null, 'input', {\n      type: 'checkbox',\n      checked: node.checked,\n      disabled: true\n    }));\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    props.className = ['task-list-item'];\n  }\n  let index = -1;\n  while (++index < result.length) {\n    const child = result[index];\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (loose || index !== 0 || child.type !== 'element' || child.tagName !== 'p') {\n      wrapped.push(u('text', '\\n'));\n    }\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      wrapped.push(...child.children);\n    } else {\n      wrapped.push(child);\n    }\n  }\n  const tail = result[result.length - 1];\n\n  // Add a final eol.\n  if (tail && (loose || !('tagName' in tail) || tail.tagName !== 'p')) {\n    wrapped.push(u('text', '\\n'));\n  }\n  return h(node, 'li', props, wrapped);\n}\n\n/**\n * @param {List} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = node.spread;\n  const children = node.children;\n  let index = -1;\n  while (!loose && ++index < children.length) {\n    loose = listItemLoose(children[index]);\n  }\n  return Boolean(loose);\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread;\n  return spread === undefined || spread === null ? node.children.length > 1 : spread;\n}","import { blockquote } from './blockquote.js';\nimport { hardBreak } from './break.js';\nimport { code } from './code.js';\nimport { strikethrough } from './delete.js';\nimport { emphasis } from './emphasis.js';\nimport { footnoteReference } from './footnote-reference.js';\nimport { footnote } from './footnote.js';\nimport { heading } from './heading.js';\nimport { html } from './html.js';\nimport { imageReference } from './image-reference.js';\nimport { image } from './image.js';\nimport { inlineCode } from './inline-code.js';\nimport { linkReference } from './link-reference.js';\nimport { link } from './link.js';\nimport { listItem } from './list-item.js';\nimport { list } from './list.js';\nimport { paragraph } from './paragraph.js';\nimport { root } from './root.js';\nimport { strong } from './strong.js';\nimport { table } from './table.js';\nimport { text } from './text.js';\nimport { thematicBreak } from './thematic-break.js';\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n};\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return null;\n}","/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport { wrap } from '../wrap.js';\nimport { all } from '../traverse.js';\n\n/**\n * @type {Handler}\n * @param {Blockquote} node\n */\nexport function blockquote(h, node) {\n  return h(node, 'blockquote', wrap(all(h, node), true));\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport { u } from 'unist-builder';\n\n/**\n * @type {Handler}\n * @param {Break} node\n * @returns {Array<Element|Text>}\n */\nexport function hardBreak(h, node) {\n  return [h(node, 'br'), u('text', '\\n')];\n}","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport { u } from 'unist-builder';\n\n/**\n * @type {Handler}\n * @param {Code} node\n */\nexport function code(h, node) {\n  const value = node.value ? node.value + '\\n' : '';\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang && node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/);\n  /** @type {Properties} */\n  const props = {};\n  if (lang) {\n    props.className = ['language-' + lang];\n  }\n  const code = h(node, 'code', props, [u('text', value)]);\n  if (node.meta) {\n    code.data = {\n      meta: node.meta\n    };\n  }\n  return h(node.position, 'pre', [code]);\n}","/**\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport { all } from '../traverse.js';\n\n/**\n * @type {Handler}\n * @param {Delete} node\n */\nexport function strikethrough(h, node) {\n  return h(node, 'del', all(h, node));\n}","/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport { all } from '../traverse.js';\n\n/**\n * @type {Handler}\n * @param {Emphasis} node\n */\nexport function emphasis(h, node) {\n  return h(node, 'em', all(h, node));\n}","/**\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport { footnoteReference } from './footnote-reference.js';\n\n/**\n * @type {Handler}\n * @param {Footnote} node\n */\nexport function footnote(h, node) {\n  const footnoteById = h.footnoteById;\n  const footnoteOrder = h.footnoteOrder;\n  let no = 1;\n  while (no in footnoteById) no++;\n  const identifier = String(no);\n\n  // No need to check if `identifier` exists in `footnoteOrder`, it’s guaranteed\n  // to not exist because we just generated it.\n  footnoteOrder.push(identifier);\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{\n      type: 'paragraph',\n      children: node.children\n    }],\n    position: node.position\n  };\n  return footnoteReference(h, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  });\n}","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport { all } from '../traverse.js';\n\n/**\n * @type {Handler}\n * @param {Heading} node\n */\nexport function heading(h, node) {\n  return h(node, 'h' + node.depth, all(h, node));\n}","/**\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport { u } from 'unist-builder';\n\n/**\n * Return either a `raw` node in dangerous mode, otherwise nothing.\n *\n * @type {Handler}\n * @param {HTML} node\n */\nexport function html(h, node) {\n  return h.dangerous ? h.augment(node, u('raw', node.value)) : null;\n}","/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport normalize from 'mdurl/encode.js';\nimport { revert } from '../revert.js';\n\n/**\n * @type {Handler}\n * @param {ImageReference} node\n */\nexport function imageReference(h, node) {\n  const def = h.definition(node.identifier);\n  if (!def) {\n    return revert(h, node);\n  }\n\n  /** @type {Properties} */\n  const props = {\n    src: normalize(def.url || ''),\n    alt: node.alt\n  };\n  if (def.title !== null && def.title !== undefined) {\n    props.title = def.title;\n  }\n  return h(node, 'img', props);\n}","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport normalize from 'mdurl/encode.js';\n\n/**\n * @type {Handler}\n * @param {Image} node\n */\nexport function image(h, node) {\n  /** @type {Properties} */\n  const props = {\n    src: normalize(node.url),\n    alt: node.alt\n  };\n  if (node.title !== null && node.title !== undefined) {\n    props.title = node.title;\n  }\n  return h(node, 'img', props);\n}","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport { u } from 'unist-builder';\n\n/**\n * @type {Handler}\n * @param {InlineCode} node\n */\nexport function inlineCode(h, node) {\n  return h(node, 'code', [u('text', node.value.replace(/\\r?\\n|\\r/g, ' '))]);\n}","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport normalize from 'mdurl/encode.js';\nimport { revert } from '../revert.js';\nimport { all } from '../traverse.js';\n\n/**\n * @type {Handler}\n * @param {LinkReference} node\n */\nexport function linkReference(h, node) {\n  const def = h.definition(node.identifier);\n  if (!def) {\n    return revert(h, node);\n  }\n\n  /** @type {Properties} */\n  const props = {\n    href: normalize(def.url || '')\n  };\n  if (def.title !== null && def.title !== undefined) {\n    props.title = def.title;\n  }\n  return h(node, 'a', props, all(h, node));\n}","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport normalize from 'mdurl/encode.js';\nimport { all } from '../traverse.js';\n\n/**\n * @type {Handler}\n * @param {Link} node\n */\nexport function link(h, node) {\n  /** @type {Properties} */\n  const props = {\n    href: normalize(node.url)\n  };\n  if (node.title !== null && node.title !== undefined) {\n    props.title = node.title;\n  }\n  return h(node, 'a', props, all(h, node));\n}","/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport { all } from '../traverse.js';\n\n/**\n * @type {Handler}\n * @param {Paragraph} node\n */\nexport function paragraph(h, node) {\n  return h(node, 'p', all(h, node));\n}","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport { u } from 'unist-builder';\nimport { all } from '../traverse.js';\nimport { wrap } from '../wrap.js';\n\n/**\n * @type {Handler}\n * @param {Root} node\n */\nexport function root(h, node) {\n  // @ts-expect-error `root`s are also fine.\n  return h.augment(node, u('root', wrap(all(h, node))));\n}","/**\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport { all } from '../traverse.js';\n\n/**\n * @type {Handler}\n * @param {Strong} node\n */\nexport function strong(h, node) {\n  return h(node, 'strong', all(h, node));\n}","/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').Handler} Handler\n * @typedef {import('../index.js').Content} Content\n */\n\nimport { pointStart, pointEnd } from 'unist-util-position';\nimport { wrap } from '../wrap.js';\nimport { all } from '../traverse.js';\n\n/**\n * @type {Handler}\n * @param {Table} node\n */\nexport function table(h, node) {\n  const rows = node.children;\n  let index = -1;\n  const align = node.align || [];\n  /** @type {Array.<Element>} */\n  const result = [];\n  while (++index < rows.length) {\n    const row = rows[index].children;\n    const name = index === 0 ? 'th' : 'td';\n    let pos = node.align ? align.length : row.length;\n    /** @type {Array.<Content>} */\n    const out = [];\n    while (pos--) {\n      const cell = row[pos];\n      out[pos] = h(cell, name, {\n        align: align[pos]\n      }, cell ? all(h, cell) : []);\n    }\n    result[index] = h(rows[index], 'tr', wrap(out, true));\n  }\n  return h(node, 'table', wrap([h(result[0].position, 'thead', wrap([result[0]], true))].concat(result[1] ? h({\n    start: pointStart(result[1]),\n    end: pointEnd(result[result.length - 1])\n  }, 'tbody', wrap(result.slice(1), true)) : []), true));\n}","/**\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport { u } from 'unist-builder';\n\n/**\n * @type {Handler}\n * @param {Text} node\n */\nexport function text(h, node) {\n  return h.augment(node, u('text', String(node.value).replace(/[ \\t]*(\\r?\\n|\\r)[ \\t]*/g, '$1')));\n}","/**\n * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode\n * @typedef {import('hast').Root|import('hast').Parent['children'][number]} HastNode\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').ElementContent} Content\n * @typedef {import('unist-util-position').PositionLike} PositionLike\n *\n * @typedef EmbeddedHastFields\n * @property {string} [hName] Defines the tag name of an element\n * @property {Properties} [hProperties] Defines the properties of an element\n * @property {Array.<Content>} [hChildren] Defines the (hast) children of an element\n *\n * @typedef {Object.<string, unknown> & EmbeddedHastFields} Data unist data with embedded hast fields\n *\n * @typedef {MdastNode & {data?: Data}} NodeWithData unist node with embedded hast data\n *\n * @callback Handler\n * @param {H} h Handle context\n * @param {any} node mdast node to handle\n * @param {Parent|null} parent Parent of `node`\n * @returns {Content|Array.<Content>|null|undefined} hast node\n *\n * @callback HFunctionProps\n * @param {MdastNode|PositionLike|null|undefined} node mdast node or unist position\n * @param {string} tagName HTML tag name\n * @param {Properties} props Properties\n * @param {Array.<Content>?} [children] hast content\n * @returns {Element}\n *\n * @callback HFunctionNoProps\n * @param {MdastNode|PositionLike|null|undefined} node mdast node or unist position\n * @param {string} tagName HTML tag name\n * @param {Array.<Content>?} [children] hast content\n * @returns {Element}\n *\n * @typedef HFields\n * @property {boolean} dangerous Whether HTML is allowed\n * @property {(identifier: string) => Definition|null} definition Definition cache\n * @property {Object.<string, FootnoteDefinition>} footnoteById Footnote cache\n * @property {Array.<string>} footnoteOrder Order in which footnotes occur\n * @property {Handlers} handlers Applied handlers\n * @property {Handler} unknownHandler Handler for any none not in `passThrough` or otherwise handled\n * @property {(left: NodeWithData|PositionLike|null|undefined, right: Content) => Content} augment Like `h` but lower-level and usable on non-elements.\n * @property {Array.<string>} passThrough List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n * @property {boolean} [allowDangerousHtml=false] Whether to allow `html` nodes and inject them as `raw` HTML\n * @property {Handlers} [handlers] Object mapping mdast nodes to functions handling them\n * @property {Array.<string>} [passThrough] List of custom mdast node types to pass through (keep) in hast\n * @property {Handler} [unknownHandler] Handler for all unknown nodes.\n *\n * @typedef {Record.<string, Handler>} Handlers Map of node types to handlers\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} H Handle context\n */\n\nimport { u } from 'unist-builder';\nimport { visit } from 'unist-util-visit';\nimport { pointStart, pointEnd } from 'unist-util-position';\nimport { generated } from 'unist-util-generated';\nimport { definitions } from 'mdast-util-definitions';\nimport { one } from './traverse.js';\nimport { footer } from './footer.js';\nimport { handlers } from './handlers/index.js';\nconst own = {}.hasOwnProperty;\n\n/**\n * Factory to transform.\n * @param {MdastNode} tree mdast node\n * @param {Options} [options] Configuration\n * @returns {H} `h` function\n */\nfunction factory(tree, options) {\n  const settings = options || {};\n  const dangerous = settings.allowDangerousHtml || false;\n  /** @type {Object.<string, FootnoteDefinition>} */\n  const footnoteById = {};\n  h.dangerous = dangerous;\n  h.definition = definitions(tree);\n  h.footnoteById = footnoteById;\n  /** @type {Array.<string>} */\n  h.footnoteOrder = [];\n  h.augment = augment;\n  h.handlers = {\n    ...handlers,\n    ...settings.handlers\n  };\n  h.unknownHandler = settings.unknownHandler;\n  h.passThrough = settings.passThrough;\n  visit(tree, 'footnoteDefinition', definition => {\n    const id = String(definition.identifier).toUpperCase();\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition;\n    }\n  });\n\n  // @ts-expect-error Hush, it’s fine!\n  return h;\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   * @param {(NodeWithData|PositionLike)?} left\n   * @param {Content} right\n   * @returns {Content}\n   */\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {Data} */\n      const data = left.data;\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          };\n        }\n        right.tagName = data.hName;\n      }\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {\n          ...right.properties,\n          ...data.hProperties\n        };\n      }\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren;\n      }\n    }\n    if (left) {\n      const ctx = 'type' in left ? left : {\n        position: left\n      };\n      if (!generated(ctx)) {\n        right.position = {\n          start: pointStart(ctx),\n          end: pointEnd(ctx)\n        };\n      }\n    }\n    return right;\n  }\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  function h(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props;\n      props = {};\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    });\n  }\n}\n\n/**\n * Transform `tree` (an mdast node) to a hast node.\n *\n * @param {MdastNode} tree mdast node\n * @param {Options} [options] Configuration\n * @returns {HastNode|null|undefined} hast node\n */\nexport function toHast(tree, options) {\n  const h = factory(tree, options);\n  const node = one(h, tree, null);\n  const foot = footer(h);\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push(u('text', '\\n'), foot);\n  }\n  return Array.isArray(node) ? {\n    type: 'root',\n    children: node\n  } : node;\n}","/**\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef NodeLike\n * @property {PositionLike | null | undefined} [position]\n */\n\n/**\n * Check if `node` is generated.\n *\n * @param {NodeLike | null | undefined} [node]\n *   Node to check.\n * @returns {boolean}\n *   Whether `node` is generated (does not have positional info).\n */\nexport function generated(node) {\n  return !node || !node.position || !node.position.start || !node.position.start.line || !node.position.start.column || !node.position.end || !node.position.end.line || !node.position.end.column;\n}","/**\n * @typedef {import('mdast').BlockContent} BlockContent\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('./index.js').H} H\n */\n\nimport { thematicBreak } from './handlers/thematic-break.js';\nimport { list } from './handlers/list.js';\nimport { wrap } from './wrap.js';\n\n/**\n * @param {H} h\n */\nexport function footer(h) {\n  const footnoteById = h.footnoteById;\n  const footnoteOrder = h.footnoteOrder;\n  let index = -1;\n  /** @type {Array.<ListItem>} */\n  const listItems = [];\n  while (++index < footnoteOrder.length) {\n    const def = footnoteById[footnoteOrder[index].toUpperCase()];\n    if (!def) {\n      continue;\n    }\n    const marker = String(index + 1);\n    const content = [...def.children];\n    /** @type {Link} */\n    const backReference = {\n      type: 'link',\n      url: '#fnref' + marker,\n      data: {\n        hProperties: {\n          className: ['footnote-back'],\n          role: 'doc-backlink'\n        }\n      },\n      children: [{\n        type: 'text',\n        value: '↩'\n      }]\n    };\n    const tail = content[content.length - 1];\n    if (tail && tail.type === 'paragraph') {\n      tail.children.push(backReference);\n    } else {\n      // @ts-expect-error Indeed, link directly added in block content.\n      // Which we do because that way at least the handlers will be called\n      // for the other HTML we’re generating (as markdown).\n      content.push(backReference);\n    }\n    listItems.push({\n      type: 'listItem',\n      data: {\n        hProperties: {\n          id: 'fn' + marker,\n          role: 'doc-endnote'\n        }\n      },\n      children: content,\n      position: def.position\n    });\n  }\n  if (listItems.length === 0) {\n    return null;\n  }\n  return h(null, 'section', {\n    className: ['footnotes'],\n    role: 'doc-endnotes'\n  }, wrap([thematicBreak(h), list(h, {\n    type: 'list',\n    ordered: true,\n    children: listItems\n  })], true));\n}","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport { toHast } from 'mdast-util-to-hast';\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin to bridge or mutate to rehype.\n *\n * If a destination is given, runs the destination with the new hast tree\n * (bridge-mode).\n * Without destination, returns the hast tree: further plugins run on that tree\n * (mutate-mode).\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype = /** @type {(import('unified').Plugin<[Processor, Options?]|[Options]|[], MdastRoot>)} */\n\nfunction (destination, options) {\n  return destination && 'run' in destination ? bridge(destination, options) : mutate(destination);\n};\nexport default remarkRehype;\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, error => {\n      next(error);\n    });\n  };\n}\n\n/**\n * Mutate-mode.\n * Further transformers run on the nlcst tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned for `toHast`.\n  return node => toHast(node, options);\n}","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property;\n    this.normal = normal;\n    if (space) {\n      this.space = space;\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {};\n/** @type {Normal} */\nSchema.prototype.normal = {};\n/** @type {string|null} */\nSchema.prototype.space = null;","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport { Schema } from './schema.js';\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {};\n  /** @type {Normal} */\n  const normal = {};\n  let index = -1;\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property);\n    Object.assign(normal, definitions[index].normal);\n  }\n  return new Schema(property, normal, space);\n}","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase();\n}","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property;\n    /** @type {string} */\n    this.attribute = attribute;\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null;\nInfo.prototype.boolean = false;\nInfo.prototype.booleanish = false;\nInfo.prototype.overloadedBoolean = false;\nInfo.prototype.number = false;\nInfo.prototype.commaSeparated = false;\nInfo.prototype.spaceSeparated = false;\nInfo.prototype.commaOrSpaceSeparated = false;\nInfo.prototype.mustUseProperty = false;\nInfo.prototype.defined = false;","let powers = 0;\nexport const boolean = increment();\nexport const booleanish = increment();\nexport const overloadedBoolean = increment();\nexport const number = increment();\nexport const spaceSeparated = increment();\nexport const commaSeparated = increment();\nexport const commaOrSpaceSeparated = increment();\nfunction increment() {\n  return 2 ** ++powers;\n}","import { Info } from './info.js';\nimport * as types from './types.js';\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types);\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1;\n    super(property, attribute);\n    mark(this, 'space', space);\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index];\n        mark(this, checks[index], (mask & types[check]) === types[check]);\n      }\n    }\n  }\n}\nDefinedInfo.prototype.defined = true;\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value;\n  }\n}","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport { normalize } from '../normalize.js';\nimport { Schema } from './schema.js';\nimport { DefinedInfo } from './defined-info.js';\nconst own = {}.hasOwnProperty;\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {};\n  /** @type {Normal} */\n  const normal = {};\n  /** @type {string} */\n  let prop;\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop];\n      const info = new DefinedInfo(prop, definition.transform(definition.attributes || {}, prop), value, definition.space);\n      if (definition.mustUseProperty && definition.mustUseProperty.includes(prop)) {\n        info.mustUseProperty = true;\n      }\n      property[prop] = info;\n      normal[normalize(prop)] = prop;\n      normal[normalize(info.attribute)] = prop;\n    }\n  }\n  return new Schema(property, normal, definition.space);\n}","import { create } from './util/create.js';\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase();\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n});","import { create } from './util/create.js';\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase();\n  },\n  properties: {\n    xmlLang: null,\n    xmlBase: null,\n    xmlSpace: null\n  }\n});","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute;\n}","import { caseSensitiveTransform } from './case-sensitive-transform.js';\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase());\n}","import { create } from './util/create.js';\nimport { caseInsensitiveTransform } from './util/case-insensitive-transform.js';\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {\n    xmlnsxlink: 'xmlns:xlink'\n  },\n  transform: caseInsensitiveTransform,\n  properties: {\n    xmlns: null,\n    xmlnsXLink: null\n  }\n});","import { booleanish, number, spaceSeparated } from './util/types.js';\nimport { create } from './util/create.js';\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase();\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n});","import { boolean, overloadedBoolean, booleanish, number, spaceSeparated, commaSeparated } from './util/types.js';\nimport { create } from './util/create.js';\nimport { caseInsensitiveTransform } from './util/case-insensitive-transform.js';\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null,\n    // Several. Use CSS `text-align` instead,\n    aLink: null,\n    // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated,\n    // `<object>`. List of URIs to archives\n    axis: null,\n    // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null,\n    // `<body>`. Use CSS `background-image` instead\n    bgColor: null,\n    // `<body>` and table elements. Use CSS `background-color` instead\n    border: number,\n    // `<table>`. Use CSS `border-width` instead,\n    borderColor: null,\n    // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number,\n    // `<body>`\n    cellPadding: null,\n    // `<table>`\n    cellSpacing: null,\n    // `<table>`\n    char: null,\n    // Several table elements. When `align=char`, sets the character to align on\n    charOff: null,\n    // Several table elements. When `char`, offsets the alignment\n    classId: null,\n    // `<object>`\n    clear: null,\n    // `<br>`. Use CSS `clear` instead\n    code: null,\n    // `<object>`\n    codeBase: null,\n    // `<object>`\n    codeType: null,\n    // `<object>`\n    color: null,\n    // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean,\n    // Lists. Use CSS to reduce space between items instead\n    declare: boolean,\n    // `<object>`\n    event: null,\n    // `<script>`\n    face: null,\n    // `<font>`. Use CSS instead\n    frame: null,\n    // `<table>`\n    frameBorder: null,\n    // `<iframe>`. Use CSS `border` instead\n    hSpace: number,\n    // `<img>` and `<object>`\n    leftMargin: number,\n    // `<body>`\n    link: null,\n    // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null,\n    // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null,\n    // `<img>`. Use a `<picture>`\n    marginHeight: number,\n    // `<body>`\n    marginWidth: number,\n    // `<body>`\n    noResize: boolean,\n    // `<frame>`\n    noHref: boolean,\n    // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean,\n    // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean,\n    // `<td>` and `<th>`\n    object: null,\n    // `<applet>`\n    profile: null,\n    // `<head>`\n    prompt: null,\n    // `<isindex>`\n    rev: null,\n    // `<link>`\n    rightMargin: number,\n    // `<body>`\n    rules: null,\n    // `<table>`\n    scheme: null,\n    // `<meta>`\n    scrolling: booleanish,\n    // `<frame>`. Use overflow in the child context\n    standby: null,\n    // `<object>`\n    summary: null,\n    // `<table>`\n    text: null,\n    // `<body>`. Use CSS `color` instead\n    topMargin: number,\n    // `<body>`\n    valueType: null,\n    // `<param>`\n    version: null,\n    // `<html>`. Use a doctype.\n    vAlign: null,\n    // Several. Use CSS `vertical-align` instead\n    vLink: null,\n    // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number,\n    // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n});","import { boolean, number, spaceSeparated, commaSeparated, commaOrSpaceSeparated } from './util/types.js';\nimport { create } from './util/create.js';\nimport { caseSensitiveTransform } from './util/case-sensitive-transform.js';\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null,\n    // SEMI_COLON_SEPARATED\n    keySplines: null,\n    // SEMI_COLON_SEPARATED\n    keyTimes: null,\n    // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n});","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport { merge } from './lib/util/merge.js';\nimport { xlink } from './lib/xlink.js';\nimport { xml } from './lib/xml.js';\nimport { xmlns } from './lib/xmlns.js';\nimport { aria } from './lib/aria.js';\nimport { html as htmlBase } from './lib/html.js';\nimport { svg as svgBase } from './lib/svg.js';\nexport { find } from './lib/find.js';\nexport { hastToReact } from './lib/hast-to-react.js';\nexport { normalize } from './lib/normalize.js';\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html');\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg');","import { visit } from 'unist-util-visit';\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean|undefined}\n *\n * @typedef Options\n * @property {Array<string>} [allowedElements]\n * @property {Array<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @type {import('unified').Plugin<[Options], Root>}\n */\nexport default function rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError('Only one of `allowedElements` and `disallowedElements` should be defined');\n  }\n  if (options.allowedElements || options.disallowedElements || options.allowElement) {\n    return tree => {\n      visit(tree, 'element', (node, index, parent_) => {\n        const parent = /** @type {Element|Root} */parent_;\n        /** @type {boolean|undefined} */\n        let remove;\n        if (options.allowedElements) {\n          remove = !options.allowedElements.includes(node.tagName);\n        } else if (options.disallowedElements) {\n          remove = options.disallowedElements.includes(node.tagName);\n        }\n        if (!remove && options.allowElement && typeof index === 'number') {\n          remove = !options.allowElement(node, index, parent);\n        }\n        if (remove && typeof index === 'number') {\n          if (options.unwrapDisallowed && node.children) {\n            parent.children.splice(index, 1, ...node.children);\n          } else {\n            parent.children.splice(index, 1);\n          }\n          return index;\n        }\n        return undefined;\n      });\n    };\n  }\n}","const protocols = ['http', 'https', 'mailto', 'tel'];\n\n/**\n * @param {string} uri\n * @returns {string}\n */\nexport function uriTransformer(uri) {\n  const url = (uri || '').trim();\n  const first = url.charAt(0);\n  if (first === '#' || first === '/') {\n    return url;\n  }\n  const colon = url.indexOf(':');\n  if (colon === -1) {\n    return url;\n  }\n  let index = -1;\n  while (++index < protocols.length) {\n    const protocol = protocols[index];\n    if (colon === protocol.length && url.slice(0, protocol.length).toLowerCase() === protocol) {\n      return url;\n    }\n  }\n  index = url.indexOf('?');\n  if (index !== -1 && colon > index) {\n    return url;\n  }\n  index = url.indexOf('#');\n  if (index !== -1 && colon > index) {\n    return url;\n  }\n\n  // eslint-disable-next-line no-script-url\n  return 'javascript:void(0)';\n}","/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n  // @ts-expect-error looks like a node.\n  thing && typeof thing === 'object' && thing.type === 'text' ?\n  // @ts-expect-error looks like a text.\n  thing.value || '' : thing;\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === '';\n}","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport { normalize } from './normalize.js';\nimport { DefinedInfo } from './util/defined-info.js';\nimport { Info } from './util/info.js';\nconst valid = /^data[-\\w.:]+$/i;\nconst dash = /-[a-z]/g;\nconst cap = /[A-Z]/g;\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value);\n  let prop = value;\n  let Type = Info;\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]];\n  }\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase);\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1);\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4);\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab);\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes;\n        }\n        value = 'data' + dashes;\n      }\n    }\n    Type = DefinedInfo;\n  }\n  return new Type(prop, value);\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase();\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase();\n}","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n};","/**\n * @template T\n * @typedef {import('react').ComponentType<T>} ComponentType<T>\n */\n\n/**\n * @template T\n * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>\n */\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('unist').Position} Position\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('./complex-types').ReactMarkdownProps} ReactMarkdownProps\n *\n * @typedef Raw\n * @property {'raw'} type\n * @property {string} value\n *\n * @typedef Context\n * @property {Options} options\n * @property {Schema} schema\n * @property {number} listDepth\n *\n * @callback TransformLink\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {string}\n *\n * @callback TransformImage\n * @param {string} src\n * @param {string} alt\n * @param {string?} title\n * @returns {string}\n *\n * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType\n *\n * @callback TransformLinkTarget\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {TransformLinkTargetType|undefined}\n *\n * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames\n *\n * To do: is `data-sourcepos` typeable?\n *\n * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps\n * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps\n * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps\n * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps\n * @typedef {ComponentPropsWithoutRef<'table'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: boolean}} TableCellProps\n * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps\n * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps\n *\n * @typedef {ComponentType<CodeProps>} CodeComponent\n * @typedef {ComponentType<HeadingProps>} HeadingComponent\n * @typedef {ComponentType<LiProps>} LiComponent\n * @typedef {ComponentType<OrderedListProps>} OrderedListComponent\n * @typedef {ComponentType<TableCellProps>} TableCellComponent\n * @typedef {ComponentType<TableRowProps>} TableRowComponent\n * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent\n *\n * @typedef SpecialComponents\n * @property {CodeComponent|ReactMarkdownNames} code\n * @property {HeadingComponent|ReactMarkdownNames} h1\n * @property {HeadingComponent|ReactMarkdownNames} h2\n * @property {HeadingComponent|ReactMarkdownNames} h3\n * @property {HeadingComponent|ReactMarkdownNames} h4\n * @property {HeadingComponent|ReactMarkdownNames} h5\n * @property {HeadingComponent|ReactMarkdownNames} h6\n * @property {LiComponent|ReactMarkdownNames} li\n * @property {OrderedListComponent|ReactMarkdownNames} ol\n * @property {TableCellComponent|ReactMarkdownNames} td\n * @property {TableCellComponent|ReactMarkdownNames} th\n * @property {TableRowComponent|ReactMarkdownNames} tr\n * @property {UnorderedListComponent|ReactMarkdownNames} ul\n *\n * @typedef {Partial<Omit<import('./complex-types').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components\n *\n * @typedef Options\n * @property {boolean} [sourcePos=false]\n * @property {boolean} [rawSourcePos=false]\n * @property {boolean} [skipHtml=false]\n * @property {boolean} [includeElementIndex=false]\n * @property {null|false|TransformLink} [transformLinkUri]\n * @property {TransformImage} [transformImageUri]\n * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]\n * @property {Components} [components]\n */\n\nimport React from 'react';\nimport ReactIs from 'react-is';\nimport { whitespace } from 'hast-util-whitespace';\nimport { svg, find, hastToReact } from 'property-information';\nimport { stringify as spaces } from 'space-separated-tokens';\nimport { stringify as commas } from 'comma-separated-tokens';\nimport style from 'style-to-object';\nconst own = {}.hasOwnProperty;\n\n// The table-related elements that must not contain whitespace text according\n// to React.\nconst tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr']);\n\n/**\n * @param {Context} context\n * @param {Element|Root} node\n */\nexport function childrenToReact(context, node) {\n  /** @type {Array<ReactNode>} */\n  const children = [];\n  let childIndex = -1;\n  /** @type {Comment|Doctype|Element|Raw|Text} */\n  let child;\n  while (++childIndex < node.children.length) {\n    child = node.children[childIndex];\n    if (child.type === 'element') {\n      children.push(toReact(context, child, childIndex, node));\n    } else if (child.type === 'text') {\n      // Currently, a warning is triggered by react for *any* white space in\n      // tables.\n      // So we drop it.\n      // See: <https://github.com/facebook/react/pull/7081>.\n      // See: <https://github.com/facebook/react/pull/7515>.\n      // See: <https://github.com/remarkjs/remark-react/issues/64>.\n      // See: <https://github.com/remarkjs/react-markdown/issues/576>.\n      if (node.type !== 'element' || !tableElements.has(node.tagName) || !whitespace(child)) {\n        children.push(child.value);\n      }\n    } else if (child.type === 'raw' && !context.options.skipHtml) {\n      // Default behavior is to show (encoded) HTML.\n      children.push(child.value);\n    }\n  }\n  return children;\n}\n\n/**\n * @param {Context} context\n * @param {Element} node\n * @param {number} index\n * @param {Element|Root} parent\n */\nfunction toReact(context, node, index, parent) {\n  const options = context.options;\n  const parentSchema = context.schema;\n  /** @type {ReactMarkdownNames} */\n  // @ts-expect-error assume a known HTML/SVG element.\n  const name = node.tagName;\n  /** @type {Record<string, unknown>} */\n  const properties = {};\n  let schema = parentSchema;\n  /** @type {string} */\n  let property;\n  if (parentSchema.space === 'html' && name === 'svg') {\n    schema = svg;\n    context.schema = schema;\n  }\n  if (node.properties) {\n    for (property in node.properties) {\n      if (own.call(node.properties, property)) {\n        addProperty(properties, property, node.properties[property], context);\n      }\n    }\n  }\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth++;\n  }\n  const children = childrenToReact(context, node);\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth--;\n  }\n\n  // Restore parent schema.\n  context.schema = parentSchema;\n\n  // Nodes created by plugins do not have positional info, in which case we use\n  // an object that matches the position interface.\n  const position = node.position || {\n    start: {\n      line: null,\n      column: null,\n      offset: null\n    },\n    end: {\n      line: null,\n      column: null,\n      offset: null\n    }\n  };\n  const component = options.components && own.call(options.components, name) ? options.components[name] : name;\n  const basic = typeof component === 'string' || component === React.Fragment;\n  if (!ReactIs.isValidElementType(component)) {\n    throw new TypeError(\"Component for name `\".concat(name, \"` not defined or is not renderable\"));\n  }\n  properties.key = [name, position.start.line, position.start.column, index].join('-');\n  if (name === 'a' && options.linkTarget) {\n    properties.target = typeof options.linkTarget === 'function' ? options.linkTarget(String(properties.href || ''), node.children, typeof properties.title === 'string' ? properties.title : null) : options.linkTarget;\n  }\n  if (name === 'a' && options.transformLinkUri) {\n    properties.href = options.transformLinkUri(String(properties.href || ''), node.children, typeof properties.title === 'string' ? properties.title : null);\n  }\n  if (!basic && name === 'code' && parent.type === 'element' && parent.tagName !== 'pre') {\n    properties.inline = true;\n  }\n  if (!basic && (name === 'h1' || name === 'h2' || name === 'h3' || name === 'h4' || name === 'h5' || name === 'h6')) {\n    properties.level = Number.parseInt(name.charAt(1), 10);\n  }\n  if (name === 'img' && options.transformImageUri) {\n    properties.src = options.transformImageUri(String(properties.src || ''), String(properties.alt || ''), typeof properties.title === 'string' ? properties.title : null);\n  }\n  if (!basic && name === 'li' && parent.type === 'element') {\n    const input = getInputElement(node);\n    properties.checked = input && input.properties ? Boolean(input.properties.checked) : null;\n    properties.index = getElementsBeforeCount(parent, node);\n    properties.ordered = parent.tagName === 'ol';\n  }\n  if (!basic && (name === 'ol' || name === 'ul')) {\n    properties.ordered = name === 'ol';\n    properties.depth = context.listDepth;\n  }\n  if (name === 'td' || name === 'th') {\n    if (properties.align) {\n      if (!properties.style) properties.style = {};\n      // @ts-expect-error assume `style` is an object\n      properties.style.textAlign = properties.align;\n      delete properties.align;\n    }\n    if (!basic) {\n      properties.isHeader = name === 'th';\n    }\n  }\n  if (!basic && name === 'tr' && parent.type === 'element') {\n    properties.isHeader = Boolean(parent.tagName === 'thead');\n  }\n\n  // If `sourcePos` is given, pass source information (line/column info from markdown source).\n  if (options.sourcePos) {\n    properties['data-sourcepos'] = flattenPosition(position);\n  }\n  if (!basic && options.rawSourcePos) {\n    properties.sourcePosition = node.position;\n  }\n\n  // If `includeElementIndex` is given, pass node index info to components.\n  if (!basic && options.includeElementIndex) {\n    properties.index = getElementsBeforeCount(parent, node);\n    properties.siblingCount = getElementsBeforeCount(parent);\n  }\n  if (!basic) {\n    properties.node = node;\n  }\n\n  // Ensure no React warnings are emitted for void elements w/ children.\n  return children.length > 0 ? React.createElement(component, properties, children) : React.createElement(component, properties);\n}\n\n/**\n * @param {Element|Root} node\n * @returns {Element?}\n */\nfunction getInputElement(node) {\n  let index = -1;\n  while (++index < node.children.length) {\n    const child = node.children[index];\n    if (child.type === 'element' && child.tagName === 'input') {\n      return child;\n    }\n  }\n  return null;\n}\n\n/**\n * @param {Element|Root} parent\n * @param {Element} [node]\n * @returns {number}\n */\nfunction getElementsBeforeCount(parent, node) {\n  let index = -1;\n  let count = 0;\n  while (++index < parent.children.length) {\n    if (parent.children[index] === node) break;\n    if (parent.children[index].type === 'element') count++;\n  }\n  return count;\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string} prop\n * @param {unknown} value\n * @param {Context} ctx\n */\nfunction addProperty(props, prop, value, ctx) {\n  const info = find(ctx.schema, prop);\n  let result = value;\n\n  // Ignore nullish and `NaN` values.\n  // eslint-disable-next-line no-self-compare\n  if (result === null || result === undefined || result !== result) {\n    return;\n  }\n\n  // Accept `array`.\n  // Most props are space-separated.\n  if (Array.isArray(result)) {\n    result = info.commaSeparated ? commas(result) : spaces(result);\n  }\n  if (info.property === 'style' && typeof result === 'string') {\n    result = parseStyle(result);\n  }\n  if (info.space && info.property) {\n    props[own.call(hastToReact, info.property) ? hastToReact[info.property] : info.property] = result;\n  } else if (info.attribute) {\n    props[info.attribute] = result;\n  }\n}\n\n/**\n * @param {string} value\n * @returns {Record<string, string>}\n */\nfunction parseStyle(value) {\n  /** @type {Record<string, string>} */\n  const result = {};\n  try {\n    style(value, iterator);\n  } catch {\n    // Silent.\n  }\n  return result;\n\n  /**\n   * @param {string} name\n   * @param {string} v\n   */\n  function iterator(name, v) {\n    const k = name.slice(0, 4) === '-ms-' ? \"ms-\".concat(name.slice(4)) : name;\n    result[k.replace(/-([a-z])/g, styleReplacer)] = v;\n  }\n}\n\n/**\n * @param {unknown} _\n * @param {string} $1\n */\nfunction styleReplacer(_, $1) {\n  return $1.toUpperCase();\n}\n\n/**\n * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos\n * @returns {string}\n */\nfunction flattenPosition(pos) {\n  return [pos.start.line, ':', pos.start.column, '-', pos.end.line, ':', pos.end.column].map(d => String(d)).join('');\n}","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = [];\n  const input = String(value || '');\n  let index = input.indexOf(',');\n  let start = 0;\n  /** @type {boolean} */\n  let end = false;\n  while (!end) {\n    if (index === -1) {\n      index = input.length;\n      end = true;\n    }\n    const token = input.slice(start, index).trim();\n    if (token || !end) {\n      tokens.push(token);\n    }\n    start = index + 1;\n    index = input.indexOf(',', start);\n  }\n  return tokens;\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {};\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values;\n  return input.join((settings.padRight ? ' ' : '') + ',' + (settings.padLeft === false ? '' : ' ')).trim();\n}","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim();\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : [];\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim();\n}","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<{}>} ReactElement\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('hast').Root} Root\n * @typedef {import('./rehype-filter.js').Options} FilterOptions\n * @typedef {import('./ast-to-react.js').Options} TransformOptions\n *\n * @typedef CoreOptions\n * @property {string} children\n *\n * @typedef PluginOptions\n * @property {PluggableList} [plugins=[]] **deprecated**: use `remarkPlugins` instead\n * @property {PluggableList} [remarkPlugins=[]]\n * @property {PluggableList} [rehypePlugins=[]]\n *\n * @typedef LayoutOptions\n * @property {string} [className]\n *\n * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions\n *\n * @typedef Deprecation\n * @property {string} id\n * @property {string} [to]\n */\n\nimport React from 'react';\nimport { VFile } from 'vfile';\nimport { unified } from 'unified';\nimport remarkParse from 'remark-parse';\nimport remarkRehype from 'remark-rehype';\nimport PropTypes from 'prop-types';\nimport { html } from 'property-information';\nimport rehypeFilter from './rehype-filter.js';\nimport { uriTransformer } from './uri-transformer.js';\nimport { childrenToReact } from './ast-to-react.js';\nconst own = {}.hasOwnProperty;\nconst changelog = 'https://github.com/remarkjs/react-markdown/blob/main/changelog.md';\n\n/** @type {Record<string, Deprecation>} */\nconst deprecated = {\n  renderers: {\n    to: 'components',\n    id: 'change-renderers-to-components'\n  },\n  astPlugins: {\n    id: 'remove-buggy-html-in-markdown-parser'\n  },\n  allowDangerousHtml: {\n    id: 'remove-buggy-html-in-markdown-parser'\n  },\n  escapeHtml: {\n    id: 'remove-buggy-html-in-markdown-parser'\n  },\n  source: {\n    to: 'children',\n    id: 'change-source-to-children'\n  },\n  allowNode: {\n    to: 'allowElement',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  allowedTypes: {\n    to: 'allowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  disallowedTypes: {\n    to: 'disallowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  includeNodeIndex: {\n    to: 'includeElementIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  }\n};\n\n/**\n * React component to render markdown.\n *\n * @param {ReactMarkdownOptions} options\n * @returns {ReactElement}\n */\nexport function ReactMarkdown(options) {\n  for (const key in deprecated) {\n    if (own.call(deprecated, key) && own.call(options, key)) {\n      const deprecation = deprecated[key];\n      console.warn(\"[react-markdown] Warning: please \".concat(deprecation.to ? \"use `\".concat(deprecation.to, \"` instead of\") : 'remove', \" `\").concat(key, \"` (see <\").concat(changelog, \"#\").concat(deprecation.id, \"> for more info)\"));\n      delete deprecated[key];\n    }\n  }\n  const processor = unified().use(remarkParse)\n  // TODO: deprecate `plugins` in v8.0.0.\n  .use(options.remarkPlugins || options.plugins || []).use(remarkRehype, {\n    allowDangerousHtml: true\n  }).use(options.rehypePlugins || []).use(rehypeFilter, options);\n  const file = new VFile();\n  if (typeof options.children === 'string') {\n    file.value = options.children;\n  } else if (options.children !== undefined && options.children !== null) {\n    console.warn(\"[react-markdown] Warning: please pass a string as `children` (not: `\".concat(options.children, \"`)\"));\n  }\n  const hastNode = processor.runSync(processor.parse(file), file);\n  if (hastNode.type !== 'root') {\n    throw new TypeError('Expected a `root` node');\n  }\n\n  /** @type {ReactElement} */\n  let result = React.createElement(React.Fragment, {}, childrenToReact({\n    options,\n    schema: html,\n    listDepth: 0\n  }, hastNode));\n  if (options.className) {\n    result = React.createElement('div', {\n      className: options.className\n    }, result);\n  }\n  return result;\n}\nReactMarkdown.defaultProps = {\n  transformLinkUri: uriTransformer\n};\nReactMarkdown.propTypes = {\n  // Core options:\n  children: PropTypes.string,\n  // Layout options:\n  className: PropTypes.string,\n  // Filter options:\n  allowElement: PropTypes.func,\n  allowedElements: PropTypes.arrayOf(PropTypes.string),\n  disallowedElements: PropTypes.arrayOf(PropTypes.string),\n  unwrapDisallowed: PropTypes.bool,\n  // Plugin options:\n  remarkPlugins: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object, PropTypes.func]))])),\n  rehypePlugins: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object, PropTypes.func]))])),\n  // Transform options:\n  sourcePos: PropTypes.bool,\n  rawSourcePos: PropTypes.bool,\n  skipHtml: PropTypes.bool,\n  includeElementIndex: PropTypes.bool,\n  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  transformImageUri: PropTypes.func,\n  components: PropTypes.object\n};"],"sourceRoot":""}